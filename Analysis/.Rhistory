.(randID, miniblock, nSteps, node, decision, choiceVar, rt, trBet, totRew)]
# Identify nodes as deep or bottleneck
fullpp[,nodeType := if(node%in%c(0,4,5,9,10,14)){'btn'}else{'deep'},by=.(randID,miniblock,nSteps)]
# Define starting transitions
fullpp[nSteps==0, transType:='start']
# Define bottleneck transitions between clusters
fullpp[nSteps!=0 & nodeType=='btn' & shift(nodeType, n=1, type='lag')=='btn', transType:='between']
# Define all transitions that stay within one cluster
fullpp[is.na(transType), transType:='within']
#################################################################################
## Analyze RT difference of within and between transitions
fullpp$rt <- as.integer(fullpp$rt)
ggplot(fullpp[transType!='start' & decision %in% c('down','up'),], aes(x=rt, col=interaction(transType)))+
geom_density() +
geom_vline(data=fullpp[transType!='start' & decision %in% c('down','up'),mean(rt),by=.(transType,decision)],
aes(xintercept=V1), color=c('blue', 'red','blue','red'))+
facet_grid(rows=vars(decision))
fullpp
get.opt.choice(1, c(1,2,3,2,1,2,3), 4, 0, tMat, 1, -1)
# Function that calculates optimal choices for Schapiro-Bet task
get.opt.choice <- function(tr, v, goal, stepsleft, tMat, winM, loseM){
opt.EV <- rep(0, length(v))
for(toti in 1:length(v)){
I <- rep(0,15); I[v[toti]]<-1
if(stepsleft[toti]==0|v[toti]==goal[toti]){
if(v[toti]==goal[toti]){opt.EV[toti]<-winM}else{opt.EV[toti]<-loseM}
}else{
hitVec <- rep(0,15)
tMat.goal <- tMat
tMat.goal[goal[toti],] <- 0
for(s in stepsleft[toti]:1){
hitC <- I %*% matrix.power(tMat.goal, s)
hitVec[s] <- hitC[goal[toti]]
}
opt.EV[toti] <- sum(hitVec)*winM + (1-sum(hitVec)) * loseM
}
}
opt.choice <- as.numeric(opt.EV>0)
opt.choice[which(opt.choice==0)] <- -1
return(opt.choice)
}
get.opt.choice(1, c(1,2,3,2,1,2,3), 4, 0, tMat, 1, -1)
fullpp
# Save only interesting participants and entries
fullpp <- devtest01[randID %in% c(1) & !is.na(node) & !is.na(decision) & miniblock>=0,
.(randID, miniblock, nSteps, node, goalnode, decision, choiceVar, rt, trBet, totRew)]
# Identify nodes as deep or bottleneck
fullpp[,nodeType := if(node%in%c(0,4,5,9,10,14)){'btn'}else{'deep'},by=.(randID,miniblock,nSteps)]
# Define starting transitions
fullpp[nSteps==0, transType:='start']
# Define bottleneck transitions between clusters
fullpp[nSteps!=0 & nodeType=='btn' & shift(nodeType, n=1, type='lag')=='btn', transType:='between']
# Define all transitions that stay within one cluster
fullpp[is.na(transType), transType:='within']
#################################################################################
## Analyze RT difference of within and between transitions
fullpp$rt <- as.integer(fullpp$rt)
ggplot(fullpp[transType!='start' & decision %in% c('down','up'),], aes(x=rt, col=interaction(transType)))+
geom_density() +
geom_vline(data=fullpp[transType!='start' & decision %in% c('down','up'),mean(rt),by=.(transType,decision)],
aes(xintercept=V1), color=c('blue', 'red','blue','red'))+
facet_grid(rows=vars(decision))
fullpp
#################################################################################
## Analyze proportion of normative choices
library(matrixcalc)
a <- 0.25
tMat <- rbind(c(0,a,a,a,0,0,0,0,0,0,0,0,0,0,a),
c(a,0,a,a,a,0,0,0,0,0,0,0,0,0,0),
c(a,a,0,a,a,0,0,0,0,0,0,0,0,0,0),
c(a,a,a,0,a,0,0,0,0,0,0,0,0,0,0),
c(0,a,a,a,0,a,0,0,0,0,0,0,0,0,0),
c(0,0,0,0,a,0,a,a,a,0,0,0,0,0,0),
c(0,0,0,0,0,a,0,a,a,a,0,0,0,0,0),
c(0,0,0,0,0,a,a,0,a,a,0,0,0,0,0),
c(0,0,0,0,0,a,a,a,0,a,0,0,0,0,0),
c(0,0,0,0,0,0,a,a,a,0,a,0,0,0,0),
c(0,0,0,0,0,0,0,0,0,a,0,a,a,a,0),
c(0,0,0,0,0,0,0,0,0,0,a,0,a,a,a),
c(0,0,0,0,0,0,0,0,0,0,a,a,0,a,a),
c(0,0,0,0,0,0,0,0,0,0,a,a,a,0,a),
c(a,0,0,0,0,0,0,0,0,0,0,a,a,a,0))
get.opt.choice(1, c(1,2,3,2,1,2,3), 4, 0, tMat, 1, -1)
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, 15-nSteps-1, tMat, 1, -1), by=.(randID,miniblock)]
fullpp$rt <- as.integer(fullpp$rt)
fullpp$nSteps <- as.integer(fullpp$nSteps)
fullpp$miniblock <- as.integer(fullpp$miniblock)
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
fullpp$node <- as.integer(fullpp$node)
fullpp$goalnode <- as.integer(fullpp$goalnode)
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
debug(get.opt.choice)
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
tr
v
goal
stepsleft
tMat
winM
loseM
opt.EV
I
I
stepsleft
toti
v[toti]
v[toti]
goal[toti]
hietC
hitC
hitVec
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
opt.EV
hitVec
tMat.goal
hitC
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
I
tMat.goal
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
stepsleft[toti]
I %*% matrix.power(tMat.goal, 14)
fullpp$nSteps <- as.numeric(fullpp$nSteps)
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node, goalnode, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
14L
matrix.power(tMat.goal, 14)
matrix.power(tMat.goal, 14L)
k
length(k)
x
class(x)
dim(x)
nrow()
nrow(x)
I
opt.EV
toti
opt.EV
v
goal
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node+1, goalnode+1, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
undebug(get.opt.choice)
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node+1, goalnode+1, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
fullpp
fullpp[miniblock==1]
fullpp[miniblock==2]
fullpp[miniblock==3]
fullpp[choiceVar==-1,]
fullpp[choiceVar==0,]
fullpp[choiceVar==1,]
fullpp[opt.choice==-1, opt.choice:=0]
fullpp
# Evaluate current choice as optimal or not
fullpp[,was.choice.opt:=choiceVar==opt.choice, by=.(randID, miniblock, nSteps)]
fullpp
0:99+1
(0:99+1)/10
ceil((0:99+1)/10)
ceiling((0:99+1)/10)
# Bin into groups of 10 miniblocks
fullpp[,opt.block.div:=(miniblock+1)/10,by=.(randID,miniblock,nSteps)]
fullpp
# Bin into groups of 10 miniblocks
fullpp[,opt.block.div:=ceiling((miniblock+1)/10),by=.(randID,miniblock,nSteps)]
fullpp
# Get percentage optimal choices per bin!
fullpp[,perc.opt:=sum(was.choice.opt),by-opt.block.div]
# Get percentage optimal choices per bin!
fullpp[,perc.opt:=sum(was.choice.opt),by=opt.block.div]
fullpp
# Get percentage optimal choices per bin!
fullpp[,sum(was.choice.opt)/.N,by=opt.block.div]
# Get percentage optimal choices per bin!
plot(1:10,fullpp[,sum(was.choice.opt)/.N,by=opt.block.div]$V1)
# Get percentage optimal choices per bin!
plot(1:10,fullpp[,sum(was.choice.opt)/.N,by=opt.block.div]$V1, type='l')
(1:100)/5
ceiling((1:100)/5)
# Bin into groups of 10 miniblocks
fullpp[,opt.block.div:=ceiling((miniblock+1)/5),by=.(randID,miniblock,nSteps)]
# Get percentage optimal choices per bin!
plot(1:20,fullpp[,sum(was.choice.opt)/.N,by=opt.block.div]$V1, type='l')
fullpp
fullpp[,list(percent.correct=sum(was.choice.opt)/.N),by=opt.block.div]
ggplot(fullpp[,list(percent.correct=sum(was.choice.opt)/.N),by=opt.block.div], aes(x=opt.block.div, y=percent.correct))+
geom_line()
#################################################################################
## Analyze RT difference of within and between transitions
ggplot(fullpp[transType!='start' & decision %in% c('down','up'),], aes(x=rt, col=transType))+
geom_density() +
geom_vline(data=fullpp[transType!='start' & decision %in% c('down','up'),mean(rt),by=.(transType,decision)],
aes(xintercept=V1), color=c('blue', 'red','blue','red'))+
facet_grid(rows=vars(decision))
################################################################################
####### Get data from devtest ArtDealer and plot a little bit the choices ######
################################################################################
# Load from SQL (laptop local)
library(RMySQL)
dbConnection <- dbConnect(MySQL(), host="mysql.ugent.be", user="s240338", password="PCGbU2wp@-wEGt6E", dbname="lccl")
data <- dbReadTable(dbConnection,"`ArtDealer_testdev_data`")
#################################################################################
## Wrangle database retrieved data into neat data.table
library(data.table)
library(ggplot2)
# Put database into table
devtest01 <- as.data.table(data)
devtest01
# All randID participants into numbers
devtest01$randID <- as.factor(devtest01$randID)
devtest01$randID
levels(devtest01$randID)
startsWith('<div id="Finish" style="this=crazy;that=amazing;">', '<div id="Finish"')
startsWith('<div id="Finish" style="this=crazy;that=amazing;">', '<div id="EndQ"')
# Check which randID has finished the experiment
devtest01
# Check which randID has finished the experiment
devtest01[startsWith(stimulus, '<div id="Finish"'),]
# Check which randID has finished the experiment
devtest01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID]
devtest01 <- devtest01[randID=='15olh4r11dmxxozswpdvky5pnlj30u13',]
devtest01
levels(devtest01$randID) <- c(1:length(levels(devtest01$randID)))
devtest01
# Save only interesting participants and entries
fullpp <- devtest01[randID %in% c(1) & !is.na(node) & !is.na(decision) & miniblock>=0,
.(randID, miniblock, nSteps, node, goalnode, decision, choiceVar, rt, trBet, totRew)]
fullpp$rt <- as.integer(fullpp$rt)
fullpp$nSteps <- as.numeric(fullpp$nSteps)
fullpp$miniblock <- as.integer(fullpp$miniblock)
fullpp$node <- as.integer(fullpp$node)
fullpp$goalnode <- as.integer(fullpp$goalnode)
# Identify nodes as deep or bottleneck
fullpp[,nodeType := if(node%in%c(0,4,5,9,10,14)){'btn'}else{'deep'},by=.(randID,miniblock,nSteps)]
# Define starting transitions
fullpp[nSteps==0, transType:='start']
# Define bottleneck transitions between clusters
fullpp[nSteps!=0 & nodeType=='btn' & shift(nodeType, n=1, type='lag')=='btn', transType:='between']
# Define all transitions that stay within one cluster
fullpp[is.na(transType), transType:='within']
#################################################################################
## Analyze RT difference of within and between transitions
ggplot(fullpp[transType!='start' & decision %in% c('down','up'),], aes(x=rt, col=transType))+
geom_density() +
geom_vline(data=fullpp[transType!='start' & decision %in% c('down','up'),mean(rt),by=.(transType,decision)],
aes(xintercept=V1), color=c('blue', 'red','blue','red'))+
facet_grid(rows=vars(decision))
#################################################################################
## Analyze proportion of normative choices
library(matrixcalc)
a <- 0.25
tMat <- rbind(c(0,a,a,a,0,0,0,0,0,0,0,0,0,0,a),
c(a,0,a,a,a,0,0,0,0,0,0,0,0,0,0),
c(a,a,0,a,a,0,0,0,0,0,0,0,0,0,0),
c(a,a,a,0,a,0,0,0,0,0,0,0,0,0,0),
c(0,a,a,a,0,a,0,0,0,0,0,0,0,0,0),
c(0,0,0,0,a,0,a,a,a,0,0,0,0,0,0),
c(0,0,0,0,0,a,0,a,a,a,0,0,0,0,0),
c(0,0,0,0,0,a,a,0,a,a,0,0,0,0,0),
c(0,0,0,0,0,a,a,a,0,a,0,0,0,0,0),
c(0,0,0,0,0,0,a,a,a,0,a,0,0,0,0),
c(0,0,0,0,0,0,0,0,0,a,0,a,a,a,0),
c(0,0,0,0,0,0,0,0,0,0,a,0,a,a,a),
c(0,0,0,0,0,0,0,0,0,0,a,a,0,a,a),
c(0,0,0,0,0,0,0,0,0,0,a,a,a,0,a),
c(a,0,0,0,0,0,0,0,0,0,0,a,a,a,0))
# Get normative choices (using older 1-indexed function)
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node+1, goalnode+1, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
fullpp[opt.choice==-1, opt.choice:=0]
# Evaluate current choice as optimal or not
fullpp[,was.choice.opt:=choiceVar==opt.choice, by=.(randID, miniblock, nSteps)]
# Bin into groups of 10 miniblocks
fullpp[,opt.block.div:=ceiling((miniblock+1)/5),by=.(randID,miniblock,nSteps)]
# Get percentage optimal choices per bin!
plot(1:20,fullpp[,sum(was.choice.opt)/.N,by=opt.block.div]$V1, type='l')
ggplot(fullpp[,list(percent.correct=sum(was.choice.opt)/.N),by=opt.block.div], aes(x=opt.block.div, y=percent.correct))+
geom_line()
# Function that calculates optimal choices for Schapiro-Bet task
get.opt.choice <- function(tr, v, goal, stepsleft, tMat, winM, loseM){
opt.EV <- rep(0, length(v))
for(toti in 1:length(v)){
I <- rep(0,15); I[v[toti]]<-1
if(stepsleft[toti]==0|v[toti]==goal[toti]){
if(v[toti]==goal[toti]){opt.EV[toti]<-winM}else{opt.EV[toti]<-loseM}
}else{
hitVec <- rep(0,15)
tMat.goal <- tMat
tMat.goal[goal[toti],] <- 0
for(s in stepsleft[toti]:1){
hitC <- I %*% matrix.power(tMat.goal, s)
hitVec[s] <- hitC[goal[toti]]
}
opt.EV[toti] <- sum(hitVec)*winM + (1-sum(hitVec)) * loseM
}
}
opt.choice <- as.numeric(opt.EV>0)
opt.choice[which(opt.choice==0)] <- -1
return(opt.choice)
}
# Get normative choices (using older 1-indexed function)
fullpp[,opt.choice:=get.opt.choice(miniblock+1, node+1, goalnode+1, (15-nSteps-1), tMat, 1, -1), by=.(randID,miniblock)]
fullpp[opt.choice==-1, opt.choice:=0]
# Evaluate current choice as optimal or not
fullpp[,was.choice.opt:=choiceVar==opt.choice, by=.(randID, miniblock, nSteps)]
# Bin into groups of 10 miniblocks
fullpp[,opt.block.div:=ceiling((miniblock+1)/5),by=.(randID,miniblock,nSteps)]
# Get percentage optimal choices per bin!
plot(1:20,fullpp[,sum(was.choice.opt)/.N,by=opt.block.div]$V1, type='l')
ggplot(fullpp[,list(percent.correct=sum(was.choice.opt)/.N),by=opt.block.div], aes(x=opt.block.div, y=percent.correct))+
geom_line()
fullpp
devtest01
grepl('img/', 'img/Lightbulb_goal', fixed=T)
endsWith('img/Lightbulb_goal.png', '_goal.png')
devtest01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'),]
devtest01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'), .(rt, stimulus)]
#################################################################################
## Analyze goal inspection times
goaltimedat <- devtest01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'), .(randID, miniblock, rt, stimulus)]
goaltimedat
ggplot(goaltimedat, aes(x=rt, col=randID))+
geom_density()
goaltimedat$rt <- as.numeric(goaltimedat$rt)
ggplot(goaltimedat, aes(x=rt, col=randID))+
geom_density()
# Count nr above 10000
goaltimedat[rt>10000, .N]
ggplot(goaltimedat[rt<10000,], aes(x=rt, col=randID))+
geom_density()
#####################################################################################
####### Get data from first logistical pilot and plot a little bit the choices ######
#####################################################################################
# Load from SQL (laptop local)
library(RMySQL)
dbConnection <- dbConnect(MySQL(), host="mysql.ugent.be", user="s240338", password="PCGbU2wp@-wEGt6E", dbname="lccl")
data <- dbReadTable(dbConnection,"`ArtDealer_PilotLogistic01_data`")
#################################################################################
## Wrangle database retrieved data into neat data.table
library(data.table)
library(ggplot2)
# Put database into table
devtest01 <- as.data.table(data)
# Get randID as factor
devtest01$randID <- as.factor(devtest01$randID)
# Check which randID has seen the 2 questions and the finishing screen of the experiment (3 indicates o.k.)
devtest01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID]
# Check which randID has seen the 2 questions and the finishing screen of the experiment (3 indicates o.k.)
devtest01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID][,randID]
# Check which randID has seen the 2 questions and the finishing screen of the experiment (3 indicates o.k.)
fullPPnrs <- devtest01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID][,randID]
fullPPnrs
devtest01[randID %in% fullPPnrs,]
#####################################################################################
####### Get data from first logistical pilot and plot a little bit the choices ######
#####################################################################################
# Load from SQL (laptop local)
library(RMySQL)
dbConnection <- dbConnect(MySQL(), host="mysql.ugent.be", user="s240338", password="PCGbU2wp@-wEGt6E", dbname="lccl")
data <- dbReadTable(dbConnection,"`ArtDealer_PilotLogistic01_data`")
# Put database into table
PilotLog01 <- as.data.table(data)
# Get randID as factor
PilotLog01$randID <- as.factor(devtest01$randID)
# Check which randID has seen the 2 questions and the finishing screen of the experiment (3 indicates o.k.)
fullPPnrs <- PilotLog01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID][,randID]
fullPPnrs
PilotLog01[randID %in% fullPPnrs,]
PilotLog01[randID %in% fullPPnrs,]$randID
PilotLog01 <- PilotLog01[randID %in% fullPPnrs,]
levels(devtest01$randID) <- c(1:length(levels(devtest01$randID)))
levels(PilogLog01$randID) <- c(1:length(levels(PilotLog01$randID)))
levels(PilotLog01$randID) <- c(1:length(levels(PilotLog01$randID)))
PilotLog01
levels(PilotLog01$randID) <- c(1:length(levels(PilotLog01$randID)))
PilotLog01
c(1:length(levels(PilotLog01$randID)))
levels(PilotLog01$randID)
dbConnection <- dbConnect(MySQL(), host="mysql.ugent.be", user="s240338", password="PCGbU2wp@-wEGt6E", dbname="lccl")
data <- dbReadTable(dbConnection,"`ArtDealer_PilotLogistic01_data`")
#################################################################################
## Wrangle database retrieved data into neat data.table
library(data.table)
library(ggplot2)
# Put database into table
PilotLog01 <- as.data.table(data)
# Get randID as factor
PilotLog01$randID <- as.factor(PilotLog01$randID)
# Check which randID has seen the 2 questions and the finishing screen of the experiment (3 indicates o.k.)
fullPPnrs <- PilotLog01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID][,randID]
PilotLog01 <- PilotLog01[randID %in% fullPPnrs,]
levels(PilotLog01$randID) <- c(1:length(levels(PilotLog01$randID)))
PilotLog01
c(1:length(levels(PilotLog01$randID)))
data <- dbReadTable(dbConnection,"`ArtDealer_PilotLogistic01_data`")
# Put database into table
PilotLog01 <- as.data.table(data)
data <- dbReadTable(dbConnection,"`ArtDealer_PilotLogistic01_data`")
dbConnection <- dbConnect(MySQL(), host="mysql.ugent.be", user="s240338", password="PCGbU2wp@-wEGt6E", dbname="lccl")
data <- dbReadTable(dbConnection,"`ArtDealer_PilotLogistic01_data`")
# Put database into table
PilotLog01 <- as.data.table(data)
PilotLog01
# Get randID as factor
PilotLog01$randID <- as.factor(PilotLog01$randID)
PilotLog01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID]
PilotLog01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID][,randID]
fullPPnrs <- PilotLog01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID][,randID]
fullPPnrs
PilotLog01 <- PilotLog01[randID %in% fullPPnrs,]
levels(PilotLog01$randID) <- c(1:length(fullPPnrs))
levels(PilotLog01$randID) <- c(1:length(levels(PilotLog01$randID)))
PilotLog01
#################################################################################
## Analyze goal inspection times
goaltimedat <- PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'), .(randID, miniblock, rt, stimulus)]
goaltimedat$rt <- as.numeric(goaltimedat$rt) # To numeric
# Count nr above 10000
goaltimedat[rt>10000, .N, by=randID]
ggplot(goaltimedat, aes(x=rt, col=randID))+
geom_density()
ggplot(goaltimedat[rt<15000,], aes(x=rt, col=randID))+
geom_density()
# Count nr above 10000
goaltimedat[rt>10000, .N, by=randID]
#Save data.table of basics
save(PilotLog01, file='dat/PilotLog01_bigdat')
# Load from data file (server)
load('dat/PilotLog01_bigdat')
dbConnection <- dbConnect(MySQL(), host="mysql.ugent.be", user="s240338", password="PCGbU2wp@-wEGt6E", dbname="lccl")
data <- dbReadTable(dbConnection,"`ArtDealer_PilotLogistic01_data`")
# Put database into table
PilotLog01 <- as.data.table(data)
save(PilotLog01, file='dat/PilotLog01_bigdat')
# Load from data file (server)
load('dat/PilotLog01_bigdat')
# Get randID as factor
PilotLog01$randID <- as.factor(PilotLog01$randID)
# Check which randID has seen the 2 questions and the finishing screen of the experiment (3 indicates o.k.)
fullPPnrs <- PilotLog01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID][,randID]
PilotLog01 <- PilotLog01[randID %in% fullPPnrs,]
levels(PilotLog01$randID) <- c(1:length(levels(PilotLog01$randID)))
#################################################################################
## Analyze goal inspection times
goaltimedat <- PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'), .(randID, miniblock, rt, stimulus)]
goaltimedat$rt <- as.numeric(goaltimedat$rt) # To numeric
# Count nr above 10000
goaltimedat[rt>10000, .N, by=randID]
ggplot(goaltimedat, aes(x=rt, col=randID))+
geom_density()
ggplot(goaltimedat[rt<15000,], aes(x=rt, col=randID))+
geom_density()
ggplot(goaltimedat[rt<2500,], aes(x=rt, col=randID))+
geom_density()
# Count nr above 10000
goaltimedat[rt>10000, .N, by=randID]
# Count nr above 10000
goaltimedat[rt>20000, .N, by=randID]
# Count nr above 10000
goaltimedat[rt>25000, .N, by=randID]
ggplot(goaltimedat, aes(x=rt, col=randID))+
geom_density()
# Inspect ordered RT for participant 3
goaltimedat[randID==3, ][order(rt)]
# Inspect ordered RT for participant 3
goaltimedat[randID==3, ][order(rt),rt]
# Inspect ordered RT for participant 3
cbind(goaltimedat[randID==3, ][order(rt),rt], goaltimedat[randID==2, ][order(rt),rt])
ggplot(goaltimedat[rt<2500,], aes(x=rt, col=randID))+
geom_density()
goaltimedat
PilotLog01
# Attach miniblock for goal to miniblock value of successive display room trials
PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'),]
# Attach miniblock for goal to miniblock value of successive display room trials
PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'), miniblock:=1]
# Attach miniblock for goal to miniblock value of successive display room trials
PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'),]
?shift
# Attach miniblock for goal to miniblock value of successive display room trials
PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'), miniblock:=shift(miniblock, n=2, type='lead')]
PilotLog01
# Attach miniblock for goal to miniblock value of successive display room trials
PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'),]
# Load from data file (server)
load('dat/PilotLog01_bigdat')
# Get randID as factor
PilotLog01$randID <- as.factor(PilotLog01$randID)
# Check which randID has seen the 2 questions and the finishing screen of the experiment (3 indicates o.k.)
fullPPnrs <- PilotLog01[startsWith(stimulus, '<div id="Finish"'), .N, by=randID][,randID]
PilotLog01 <- PilotLog01[randID %in% fullPPnrs,]
levels(PilotLog01$randID) <- c(1:length(levels(PilotLog01$randID)))
# Attach miniblock for goal to miniblock value of successive display room trials
PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'), miniblock:=shift(miniblock, n=2, type='lead')]
PilotLog01
#################################################################################
## Analyze goal inspection times
goaltimedat <- PilotLog01[startsWith(stimulus, 'img/') & endsWith(stimulus, '_goal.png'), .(randID, miniblock, rt, stimulus)]
goaltimedat$rt <- as.numeric(goaltimedat$rt) # To numeric
# Inspect ordered RTs for each participant
cbind(goaltimedat[randID==3, ][order(rt),rt], goaltimedat[randID==2, ][order(rt),rt])
goaltimedat
rep(1:100, 2)
goaltimedat$miniblock <- rep(1:100, 2)
goaltimedat
# Line plot of evolution of inspection times throughout experiment progression
ggplot(goaltimedat, aes(x=miniblock, y=rt, col=randID))+
geom_line(0)
# Line plot of evolution of inspection times throughout experiment progression
ggplot(goaltimedat, aes(x=miniblock, y=rt, col=randID))+
geom_line()
