tempDat
tempDat
i
exp.trans$V1[i]
exp.trans$V2[i]
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:2){
tempDat <- cbind(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
N.f = full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)]$N)[,'N.p':=N/N.f]
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(aes(x=tempDat[,mean(N.p),by='step']$step, y=tempDat[,mean(N.p),by='step']$V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none')
pL[[i]] <- p
}
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:2){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(aes(x=tempDat[,mean(N.p),by='step']$step, y=tempDat[,mean(N.p),by='step']$V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none')
pL[[i]] <- p
}
pL[[1]]
pL[2]
pL[[1]]
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:3){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(aes(x=tempDat[,mean(N.p),by='step']$step, y=tempDat[,mean(N.p),by='step']$V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none')
pL[[i]] <- p
}
pL[[1]]
pL[[2]]
pL[[3]]
pL[[1]]
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:3){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempDat,aes(x=tempDat[,mean(N.p),by='step']$step, y=tempDat[,mean(N.p),by='step']$V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none')
pL[[i]] <- p
}
pL[[1]]
tempDat[,mean(N.p),by='step']
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:3){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none')
pL[[i]] <- p
}
pL[[1]]
pL[[2]]
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:3){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none', title=paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2)))
pL[[i]] <- p
}
pL[[1]]
paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2))
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:3){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none', title=paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i])))
pL[[i]] <- p
}
pL[[1]]
paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i]))
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:3){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none', title=element_text(paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i]))))
pL[[i]] <- p
}
pL[[1]]
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.75,0.25,rep(0.25,14))
for(i in 1:3){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none') +
ggtitle(paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i])))
pL[[i]] <- p
}
pL[1]
exp.trans
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.5,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.5,0.25,0.5,0.25,0.75,0.25,0.25)
length(k)
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.5,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.5,0.25,0.5,0.25,0.75,0.25,0.25)
for(i in 1:nrow(exp.trans)){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none') +
ggtitle(paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i])))
pL[[i]] <- p
}
length(pL)
pdf('figs/ExpGen_TransCheck.pdf')
for(i in 1:length(pL)){
print(pL[[i]])
}
dev.off()
bt.map
c.map
# Get experiment into data.table because it is better in every way
full.exp.d <- data.table(full.exp)
# Define start and goal cluster per trial
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
startc=names(idmap.g[sapply(idmap.g, function(m){v[1] %in% m})]),
goalc=names(idmap.g[sapply(idmap.g, function(m){goal[1] %in% m})])),
by=c('pp','tr')][,c('startc','goalc')])
# Define depending leave and disappoint cluster
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
leavec=c.map[[startc[1]]][c.map[[startc[1]]]!=goalc[1]],
disc=c.map[[goalc[1]]][c.map[[goalc[1]]]!=startc[1]]),
by=c('pp','tr')][,c('leavec','disc')])
# Identify all node identities!
full.exp.d <- full.exp.d[, list('ds'  = v %in% idmap.g[[startc]],
'btg' = v %in% bt.map[[startc]][which(c.map[[startc]]==goalc)],
'btl' = v %in% bt.map[[startc]][which(c.map[[startc]]!=goalc)],
'big' = v %in% bt.map[[goalc]][which(c.map[[goalc]]==startc)],
'bil' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==startc)],
'dg'  = v %in% idmap.g[[goalc]],
'dl'  = v %in% idmap.g[[leavec]],
'bid' = v %in% bt.map[[disc]][which(c.map[[disc]]==goalc)],
'btd' = v %in% bt.map[[goalc]][which(c.map[[goalc]]!=startc)],
'dd'  = v %in% idmap.g[[disc]],
'bfd' = v %in% bt.map[[disc]][which(c.map[[disc]]==leavec)],
'bfl' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==disc)]), by=c('pp','tr','step')]
# Reshape data.table into transition data instead of occupation data
full.exp.d <- cbind(full.exp.d[, .SD[step %in% 0:(.N-2)], by=c('pp','tr')], f=full.exp.d[, .SD[step %in% 1:.N,], by=c('pp','tr')][,c('ds','btg','btl','big','bil','dg','dl','bid','btd','dd','bfd','bfl')])
# Get experiment data into pre and post transition // Exclude non-interesting node transitions
exp.trans <- apply(full.exp.d[,4:23], 1, function(i){names(i)[which(as.logical(i))]})
full.exp.d <- cbind(full.exp.d[-which(sapply(exp.trans, length) <2),1:3], do.call(rbind,exp.trans[-which(sapply(exp.trans, length)<2)]))
exp.trans <- data.table(do.call(rbind, exp.trans[-which(sapply(exp.trans,length)<2)]))
exp.trans <- exp.trans[!duplicated(exp.trans),]
exp.trans
full.exp.d
# Get experiment into data.table because it is better in every way
full.exp.d <- data.table(full.exp)
# Define start and goal cluster per trial
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
startc=names(idmap.g[sapply(idmap.g, function(m){v[1] %in% m})]),
goalc=names(idmap.g[sapply(idmap.g, function(m){goal[1] %in% m})])),
by=c('pp','tr')][,c('startc','goalc')])
# Define depending leave and disappoint cluster
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
leavec=c.map[[startc[1]]][c.map[[startc[1]]]!=goalc[1]],
disc=c.map[[goalc[1]]][c.map[[goalc[1]]]!=startc[1]]),
by=c('pp','tr')][,c('leavec','disc')])
# Identify all node identities!
full.exp.d <- full.exp.d[, list('ds'  = v %in% idmap.g[[startc]],
'btg' = v %in% bt.map[[startc]][which(c.map[[startc]]==goalc)],
'btl' = v %in% bt.map[[startc]][which(c.map[[startc]]!=goalc)],
'big' = v %in% bt.map[[goalc]][which(c.map[[goalc]]==startc)],
'bil' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==startc)],
'dg'  = v %in% idmap.g[[goalc]],
'dl'  = v %in% idmap.g[[leavec]],
'bid' = v %in% bt.map[[disc]][which(c.map[[disc]]==goalc)],
'btd' = v %in% bt.map[[goalc]][which(c.map[[goalc]]!=startc)],
'dd'  = v %in% idmap.g[[disc]],
'bfd' = v %in% bt.map[[disc]][which(c.map[[disc]]==leavec)],
'bfl' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==disc)]), by=c('pp','tr','step')]
# Reshape data.table into transition data instead of occupation data
full.exp.d <- cbind(full.exp.d[, .SD[step %in% 0:(.N-2)], by=c('pp','tr')], f=full.exp.d[, .SD[step %in% 1:.N,], by=c('pp','tr')][,c('ds','btg','btl','big','bil','dg','dl','bid','btd','dd','bfd','bfl')])
full.exp.d
ncol(full.exp.d)
# Get experiment data into pre and post transition // Exclude non-interesting node transitions
exp.trans <- apply(full.exp.d[,4:27], 1, function(i){names(i)[which(as.logical(i))]})
full.exp.d <- cbind(full.exp.d[-which(sapply(exp.trans, length) <2),1:3], do.call(rbind,exp.trans[-which(sapply(exp.trans, length)<2)]))
exp.trans
# Get experiment into data.table because it is better in every way
full.exp.d <- data.table(full.exp)
# Define start and goal cluster per trial
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
startc=names(idmap.g[sapply(idmap.g, function(m){v[1] %in% m})]),
goalc=names(idmap.g[sapply(idmap.g, function(m){goal[1] %in% m})])),
by=c('pp','tr')][,c('startc','goalc')])
# Define depending leave and disappoint cluster
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
leavec=c.map[[startc[1]]][c.map[[startc[1]]]!=goalc[1]],
disc=c.map[[goalc[1]]][c.map[[goalc[1]]]!=startc[1]]),
by=c('pp','tr')][,c('leavec','disc')])
# Identify all node identities!
full.exp.d <- full.exp.d[, list('ds'  = v %in% idmap.g[[startc]],
'btg' = v %in% bt.map[[startc]][which(c.map[[startc]]==goalc)],
'btl' = v %in% bt.map[[startc]][which(c.map[[startc]]!=goalc)],
'big' = v %in% bt.map[[goalc]][which(c.map[[goalc]]==startc)],
'bil' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==startc)],
'dg'  = v %in% idmap.g[[goalc]],
'dl'  = v %in% idmap.g[[leavec]],
'bid' = v %in% bt.map[[disc]][which(c.map[[disc]]==goalc)],
'btd' = v %in% bt.map[[goalc]][which(c.map[[goalc]]!=startc)],
'dd'  = v %in% idmap.g[[disc]],
'bfd' = v %in% bt.map[[disc]][which(c.map[[disc]]==leavec)],
'bfl' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==disc)]), by=c('pp','tr','step')]
# Reshape data.table into transition data instead of occupation data
full.exp.d <- cbind(full.exp.d[, .SD[step %in% 0:(.N-2)], by=c('pp','tr')], f=full.exp.d[, .SD[step %in% 1:.N,], by=c('pp','tr')][,c('ds','btg','btl','big','bil','dg','dl','bid','btd','dd','bfd','bfl')])
full.exp.d
# Get experiment data into pre and post transition // Exclude non-interesting node transitions
exp.trans <- apply(full.exp.d[,4:27], 1, function(i){names(i)[which(as.logical(i))]})
exp.trans
head(exp.trans)
exp.trans[[1]]
exp.trans[1]
full.exp.d
names(full.exp.d[1,4:27])
names(full.exp.d[1,4:27])[which(as.logical(full.exp.d[1,4:27]))]
exp.trans[1,]
exp.trans[2,]
sapply(exp.trans, length)
sapply(1:nrow(full.exp.d), function(i){names(full.exp.d[i,4:27])[which(as.logical(full.exp.d[i,4:27]))]})
exp.trans[1,]
nrow(full.exp.d)
cbind(full.exp.d[,1:3], exp.trans[1,],exp.trans[2,])
cbind(full.exp.d[,1:3], V1=exp.trans[1,], V2=exp.trans[2,])
full.exp.d <- cbind(full.exp.d[,1:3], V1=exp.trans[1,], V2=exp.trans[2,])
exp.trans <- data.table(exp.trans[1,], exp.trans[2,])
exp.trans
exp.trans <- exp.trans[!duplicated(exp.trans),]
exp.trans
# Make plots to identify if transitions deviate from random walk expectation W.R.T GOAL DIRECTEDNESS (not Edge/Node structural identity)
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.5,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.5,0.25,0.5,0.25,0.75,0.25,0.25,0.25)
length(k)
# Make plots to identify if transitions deviate from random walk expectation W.R.T GOAL DIRECTEDNESS (not Edge/Node structural identity)
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.5,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.5,0.25,0.5,0.25,0.75,0.25,0.25,0.25)
for(i in 1:nrow(exp.trans)){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none') +
ggtitle(paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i])))
pL[[i]] <- p
}
pL[[1]]
pdf('figs/ExpGen_TransCheck.pdf')
for(i in 1:length(pL)){
print(pL[[i]])
}
dev.off()
# Get experiment into data.table because it is better in every way
full.exp.d <- data.table(full.exp)
# Define start and goal cluster per trial
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
startc=names(idmap.g[sapply(idmap.g, function(m){v[1] %in% m})]),
goalc=names(idmap.g[sapply(idmap.g, function(m){goal[1] %in% m})])),
by=c('pp','tr')][,c('startc','goalc')])
# Define depending leave and disappoint cluster
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
leavec=c.map[[startc[1]]][c.map[[startc[1]]]!=goalc[1]],
disc=c.map[[goalc[1]]][c.map[[goalc[1]]]!=startc[1]]),
by=c('pp','tr')][,c('leavec','disc')])
# Identify all node identities!
full.exp.d <- full.exp.d[, list('ds'  = v %in% idmap.g[[startc]],
'btg' = v %in% bt.map[[startc]][which(c.map[[startc]]==goalc)],
'btl' = v %in% bt.map[[startc]][which(c.map[[startc]]!=goalc)],
'big' = v %in% bt.map[[goalc]][which(c.map[[goalc]]==startc)],
'bil' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==startc)],
'dg'  = v %in% idmap.g[[goalc]],
'dl'  = v %in% idmap.g[[leavec]],
'bid' = v %in% bt.map[[disc]][which(c.map[[disc]]==goalc)],
'btd' = v %in% bt.map[[goalc]][which(c.map[[goalc]]!=startc)],
'dd'  = v %in% idmap.g[[disc]],
'bnd' = v %in% bt.map[[disc]][which(c.map[[disc]]==leavec)],
'bnl' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==disc)]), by=c('pp','tr','step')]
# Reshape data.table into transition data instead of occupation data
full.exp.d <- cbind(full.exp.d[, .SD[step %in% 0:(.N-2)], by=c('pp','tr')], f=full.exp.d[, .SD[step %in% 1:.N,], by=c('pp','tr')][,c('ds','btg','btl','big','bil','dg','dl','bid','btd','dd','bnd','bnl')])
# Get experiment data into pre and post transition
exp.trans <- apply(full.exp.d[,4:27], 1, function(i){names(i)[which(as.logical(i))]})
full.exp.d <- cbind(full.exp.d[,1:3], V1=exp.trans[1,], V2=exp.trans[2,])
# List all unique transitions
exp.trans <- data.table(exp.trans[1,], exp.trans[2,])
exp.trans <- exp.trans[!duplicated(exp.trans),]
# Make plots to identify if transitions deviate from random walk expectation W.R.T GOAL DIRECTEDNESS (not Edge/Node structural identity)
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.5,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.5,0.25,0.5,0.25,0.75,0.25,0.25,0.25)
for(i in 1:nrow(exp.trans)){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none') +
ggtitle(paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i])))
pL[[i]] <- p
}
pdf('figs/ExpGen_TransCheck.pdf')
for(i in 1:length(pL)){
print(pL[[i]])
}
dev.off()
# Load Functions from /src/
sapply(paste0('src/',list.files('src/')), source)
# Get different Defining Parameters
nSteps <- 15   # Nr of maximum steps in a miniblock (hitMat and EVcalc will use nSteps-1; agent simulations will use nSteps!)
gRew   <- 65   # Reward upon reaching vGoal
sCost  <- 1    # Points detracted from accumulated reward for each taken step
# Get parameters for agentic simulations
nPP <- 500
nTr <- 100
#Quad Schapiro-style edge matrix
Edges <- list(c(2, 3, 4, 20),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 5),
c(2, 3, 4, 6),
c(5, 7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9, 11),
c(10,12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14,16),
c(15,17,18,19),
c(16,18,19,20),
c(16,17,19,20),
c(16,17,18,20),
c(17,18,19, 1))
Edge.list <- foreach(i = 1:length(Edges), .combine=rbind) %do% {expand.grid(i, Edges[[i]])}
# Describe unique nodes for QuadSchap
inspect.Vertices <- c(1, 2, 5, 6, 7, 16, 17)
# Describe identical nodes for QuadSchap
idmap   <- list(a = c(1,15), b = c(2,3,4, 12,13,14), c = c(5,11), d = c(6,10), e = c(7,9), f = c(16,20), g = c(17,18,19))
idmap.g <- list(a = c(2,3,4), b = c(7,8,9), c = c(12,13,14), d = c(17,18,19))
c.map   <- list(a = c('d','b'), b = c('a', 'c'), c = c('b','d'), d=c('a','c'))
bt.map  <- list(a = c(1,5), b = c(6,10), c= c(11,15), d=c(20,16))
# Get the hitMat
hitMat <- read.csv('data/hitMat_quadSchap_step15.csv', row.names=1)
# Get expected hits in 1 exp
nHit <- ceiling(nTr * sum(hitMat[hitMat$vertex==2,'goalprob']))
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=1)
do.call(1:500, function(i){Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=i)})
do.call(function(i){Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=i)}, 1:500)
do.call(function(i){Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=i)}, list(1:500))
list(1:500)
list(c(1:500))
foreach(i=1:500, .combine=rbind) %do% {Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=i)}
foreach(i=1:5, .combine=rbind) %do% {Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=i)}
full.exp <- foreach(i=1:5, .combine=rbind) %do% {Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=i)}
tail(full.exp)
full.exp <- foreach(i=1:500, .combine=rbind) %do% {Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=i)}
# Evaluate edges in line plots to check equal distribution
Edge.eval <- matrix(rep(rep(0, nrow(Edge.list)),nPP), ncol=nPP)
for(p in 1:nPP){
for(tr in 1:nTr){
for(n in 2:length(full.exp[full.exp$tr==tr & full.exp$pp==p,]$v)){
Edge.eval[which(Edge.list[,1]==full.exp[full.exp$tr==tr & full.exp$pp==p,]$v[n-1] & Edge.list[,2]==full.exp[full.exp$tr==tr & full.exp$pp==p,]$v[n]),p] <- Edge.eval[which(Edge.list[,1]==full.exp[full.exp$tr==tr & full.exp$pp==p,]$v[n-1] & Edge.list[,2]==full.exp[full.exp$tr==tr & full.exp$pp==p,]$v[n]),p] + 1
}
}
}
# Get experiment into data.table because it is better in every way
full.exp.d <- data.table(full.exp)
# Define start and goal cluster per trial
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
startc=names(idmap.g[sapply(idmap.g, function(m){v[1] %in% m})]),
goalc=names(idmap.g[sapply(idmap.g, function(m){goal[1] %in% m})])),
by=c('pp','tr')][,c('startc','goalc')])
# Define depending leave and disappoint cluster
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
leavec=c.map[[startc[1]]][c.map[[startc[1]]]!=goalc[1]],
disc=c.map[[goalc[1]]][c.map[[goalc[1]]]!=startc[1]]),
by=c('pp','tr')][,c('leavec','disc')])
# Identify all node identities!
full.exp.d <- full.exp.d[, list('ds'  = v %in% idmap.g[[startc]],
'btg' = v %in% bt.map[[startc]][which(c.map[[startc]]==goalc)],
'btl' = v %in% bt.map[[startc]][which(c.map[[startc]]!=goalc)],
'big' = v %in% bt.map[[goalc]][which(c.map[[goalc]]==startc)],
'bil' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==startc)],
'dg'  = v %in% idmap.g[[goalc]],
'dl'  = v %in% idmap.g[[leavec]],
'bid' = v %in% bt.map[[disc]][which(c.map[[disc]]==goalc)],
'btd' = v %in% bt.map[[goalc]][which(c.map[[goalc]]!=startc)],
'dd'  = v %in% idmap.g[[disc]],
'bnd' = v %in% bt.map[[disc]][which(c.map[[disc]]==leavec)],
'bnl' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==disc)]), by=c('pp','tr','step')]
# Reshape data.table into transition data instead of occupation data
full.exp.d <- cbind(full.exp.d[, .SD[step %in% 0:(.N-2)], by=c('pp','tr')], f=full.exp.d[, .SD[step %in% 1:.N,], by=c('pp','tr')][,c('ds','btg','btl','big','bil','dg','dl','bid','btd','dd','bnd','bnl')])
# Get experiment data into pre and post transition
exp.trans <- apply(full.exp.d[,4:27], 1, function(i){names(i)[which(as.logical(i))]})
full.exp.d <- cbind(full.exp.d[,1:3], V1=exp.trans[1,], V2=exp.trans[2,])
# List all unique transitions
exp.trans <- data.table(exp.trans[1,], exp.trans[2,])
exp.trans <- exp.trans[!duplicated(exp.trans),]
# Make plots to identify if transitions deviate from random walk expectation W.R.T GOAL DIRECTEDNESS (not Edge/Node structural identity)
pL <- list()
k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.5,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.5,0.25,0.5,0.25,0.75,0.25,0.25,0.25)
exp.trans
#k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.5,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.5,0.25,0.5,0.25,0.75,0.25,0.25,0.25)
k = c(0.25,0.75,0.5,0.25,0.75,0.25,0.75,0.25,0.75,0.5,0.25,0.75,0.25,0.25,0.75,0.25,0.25,0.25,0.25,0.25,0.75,0.25,0.25,0.5,0.5,0.75,0.25,0.25)
# Make plots to identify if transitions deviate from random walk expectation W.R.T GOAL DIRECTEDNESS (not Edge/Node structural identity)
pL <- list()
#k=c(0.25,0.75,0.5,0.25,0.25,0.75,0.5,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.25,0.75,0.25,0.25,0.75,0.5,0.25,0.5,0.25,0.75,0.25,0.25,0.25)
k = c(0.25,0.75,0.5,0.25,0.75,0.25,0.75,0.25,0.75,0.5,0.25,0.75,0.25,0.25,0.75,0.25,0.25,0.25,0.25,0.25,0.75,0.25,0.25,0.5,0.5,0.75,0.25,0.25)
for(i in 1:nrow(exp.trans)){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'))[,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
theme(legend.position = 'none') +
ggtitle(paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i])))
pL[[i]] <- p
}
pdf('figs/ExpGen_TransCheck_2.pdf')
for(i in 1:length(pL)){
print(pL[[i]])
}
dev.off()
