AG.dat <- rbind(AG.dat, RandomStopper( Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=candidates[exp,1], sCost=candidates[exp,2], nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, LazyWaiter(    Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=candidates[exp,1], sCost=candidates[exp,2], nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, RandomLengther(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=candidates[exp,1], sCost=candidates[exp,2], nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, OptimalStopper(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=candidates[exp,1], sCost=candidates[exp,2], nTrials=nTr, parNum=pp, startRew=0, piMat=piMat))
}
AG.dat <- AG.dat[-1,]
AG.dat$strat <- droplevels(AG.dat$strat)
# Summarize agent simulations per participant
AG.dat.ppEval <- data.frame(pp=0, totRew=0, endV.p=0, strat='init', gRew=0, sCost=0)
for(pp in 1:nPP){
for(strat in levels(AG.dat$strat)){
totRew <- AG.dat[AG.dat$pp==pp & AG.dat$trial==max(AG.dat$trial) & AG.dat$strat==strat,]$totRew
endV.p <- sum(AG.dat[AG.dat$pp==pp & AG.dat$strat==strat,]$endV==vGoal)
AG.dat.ppEval <- rbind(AG.dat.ppEval, data.frame(pp=pp, totRew=totRew, endV.p=endV.p, strat=strat, gRew=candidates[exp,1], sCost=candidates[exp,2]))
}
}
AG.dat.ppEval[-1,]
}
largeSim
# Plot agent data!
ggplot(largeSim, aes(x=totRew, col=strat)) +
geom_density() +
facet_grid(gRew~sCost)
write.csv(largeSim, file='data/MC_Rew_BlockedSchap.csv')
#Full Karuza-style quad-module edge matrix
Edges <- list(c(2, 3, 4, 5, 24),
c(1, 3, 4, 5, 6),
c(1, 2, 4, 5, 6),
c(1, 2, 3, 5, 6),
c(1, 2, 3, 4, 6),
c(2, 3, 4, 5, 7),
c(6, 8, 9, 10,11),
c(7, 9, 10,11,12),
c(7, 8, 10,11,12),
c(7, 8, 9, 11,12),
c(7, 8, 9, 10,12),
c(8, 9, 10,11,13),
c(12,14,15,16,17),
c(13,15,16,17,18),
c(13,14,16,17,18),
c(13,14,15,17,18),
c(13,14,15,16,18),
c(14,15,16,17,19),
c(18,20,21,22,23),
c(19,21,22,23,24),
c(19,20,22,23,24),
c(19,20,21,23,24),
c(19,20,21,22,24),
c(1, 20,21,22,23))
# Load Functions from /src/
sapply(paste0('src/',list.files('src/')), source)
# Get different Defining Parameters
vStart <- 2    # Nr of starting node
vGoal  <- 8    # Nr of goal (terminating, rewarding) node
nSteps <- 10   # Nr of maximum steps in a miniblock (hitMat and EVcalc will use nSteps-1; agent simulations will use nSteps!)
#Full Karuza-style quad-module edge matrix
Edges <- list(c(2, 3, 4, 5, 24),
c(1, 3, 4, 5, 6),
c(1, 2, 4, 5, 6),
c(1, 2, 3, 5, 6),
c(1, 2, 3, 4, 6),
c(2, 3, 4, 5, 7),
c(6, 8, 9, 10,11),
c(7, 9, 10,11,12),
c(7, 8, 10,11,12),
c(7, 8, 9, 11,12),
c(7, 8, 9, 10,12),
c(8, 9, 10,11,13),
c(12,14,15,16,17),
c(13,15,16,17,18),
c(13,14,16,17,18),
c(13,14,15,17,18),
c(13,14,15,16,18),
c(14,15,16,17,19),
c(18,20,21,22,23),
c(19,21,22,23,24),
c(19,20,22,23,24),
c(19,20,21,23,24),
c(19,20,21,22,24),
c(1, 20,21,22,23))
# Describe unique nodes
inspect.Vertices <- c(1, 2, 6, 7, 9, 19, 20)
# Describe identical nodes
idmap <- list(a = c(1,18), b = c(2,3,4,5, 14,15,16,17), c = c(6,13), d = c(7,12), e = c(9,10,11), f = c(19,24), g = c(20,21,22,23))
############################################################################################################################
############################ For testing with graphs that have 4 modules (and 24 nodes?) ###################################
############################################################################################################################
library(foreach)
# Describe unique nodes
inspect.Vertices <- c(1, 2, 6, 7, 9, 19, 20)
# Describe identical nodes
idmap <- list(a = c(1,18), b = c(2,3,4,5, 14,15,16,17), c = c(6,13), d = c(7,12), e = c(9,10,11), f = c(19,24), g = c(20,21,22,23))
# Get the hitMat
hitMat <- foreach(v=inspect.Vertices, .combine=rbind) %do% {
tempMat <- hitMat.calc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, inspectVs=v, totP=5^(nSteps-1))
tempMat
}
#Reduced Schapiro-style quad-module edge matrix
Edges <- list(c(2, 3, 4, 20),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 5),
c(2, 3, 4, 6),
c(5, 7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9, 11),
c(10,12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14,16),
c(15,17,18,19),
c(16,18,19,20),
c(16,17,19,20),
c(16,17,18,20),
c(17,18,19, 1))
# Describe identical nodes for RSchap
idmap <- list(a = c(1,15), b = c(2,3,4, 12,13,14), c = c(5,11), d = c(6,10), e = c(7,9), f = c(16,20), g = c(17,18,19))
idmap
#Reduced Schapiro-style quad-module edge matrix
Edges <- list(c(2, 3, 4, 20),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 5),
c(2, 3, 4, 6),
c(5, 7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9, 11),
c(10,12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14,16),
c(15,17,18,19),
c(16,18,19,20),
c(16,17,19,20),
c(16,17,18,20),
c(17,18,19, 1))
# Describe unique nodes for RSchap
inspect.Vertices <- c(1, 2, 5, 6, 7, 16, 17)
# Describe identical nodes for RSchap
idmap <- list(a = c(1,15), b = c(2,3,4, 12,13,14), c = c(5,11), d = c(6,10), e = c(7,9), f = c(16,20), g = c(17,18,19))
# Get the hitMat
hitMat <- foreach(v=inspect.Vertices, .combine=rbind) %do% {
tempMat <- hitMat.calc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, inspectVs=v, totP=4^(nSteps-1))
tempMat
}
hitMat
sum(hitMat[hitMat$vertex==2,'goalchance'])
sum(hitMat[hitMat$vertex==2,'goalprob'])
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
gRew   <- 7    # Reward upon reaching vGoal
sCost  <- 0.15 # Points detracted from accumulated reward for each taken step
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
piMat
candidates <- data.frame(gRew = 0, sCost = 0)
for(rew in 5:20){
for(cost in seq(0.1,1,0.02)){
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=rew, sCost=cost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
if(piMat[piMat$vertex==1,]$stopid < 8){
candidates <- rbind(candidates, data.frame(gRew=rew, sCost=cost))
}
}
}
candidates
piMat
gRew   <- 20    # Reward upon reaching vGoal
sCost  <- 0.18 # Points detracted from accumulated reward for each taken step
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
piMat
# Run several agents on this task, all encompassing different heuristics
AG.dat <- data.frame(pp=0, trial=0, trRew=0, nSteps=0, endV=0, totRew=0, strat='init')
for(pp in 1:nPP){
AG.dat <- rbind(AG.dat, RandomStopper( Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, LazyWaiter(    Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, RandomLengther(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, OptimalStopper(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0, piMat=piMat))
}
# Get parameters for agentic simulations
nPP <- 250
nTr <- 100
# Run several agents on this task, all encompassing different heuristics
AG.dat <- data.frame(pp=0, trial=0, trRew=0, nSteps=0, endV=0, totRew=0, strat='init')
for(pp in 1:nPP){
AG.dat <- rbind(AG.dat, RandomStopper( Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, LazyWaiter(    Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, RandomLengther(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, OptimalStopper(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0, piMat=piMat))
}
AG.dat <- AG.dat[-1,]
AG.dat$strat <- droplevels(AG.dat$strat)
# Summarize agent simulations per participant
AG.dat.ppEval <- data.frame(pp=0, totRew=0, endV.p=0, strat='init')
for(pp in 1:nPP){
for(strat in levels(AG.dat$strat)){
totRew <- AG.dat[AG.dat$pp==pp & AG.dat$trial==max(AG.dat$trial) & AG.dat$strat==strat,]$totRew
endV.p <- sum(AG.dat[AG.dat$pp==pp & AG.dat$strat==strat,]$endV==vGoal)
AG.dat.ppEval <- rbind(AG.dat.ppEval, data.frame(pp=pp, totRew=totRew, endV.p=endV.p, strat=strat))
}
}
AG.dat.ppEval <- AG.dat.ppEval[-1,]
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
candidates
gRew   <- 18    # Reward upon reaching vGoal
sCost  <- 0.16 # Points detracted from accumulated reward for each taken step
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
piMat
# Run several agents on this task, all encompassing different heuristics
AG.dat <- data.frame(pp=0, trial=0, trRew=0, nSteps=0, endV=0, totRew=0, strat='init')
for(pp in 1:nPP){
AG.dat <- rbind(AG.dat, RandomStopper( Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, LazyWaiter(    Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, RandomLengther(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, OptimalStopper(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0, piMat=piMat))
}
AG.dat <- AG.dat[-1,]
AG.dat$strat <- droplevels(AG.dat$strat)
# Summarize agent simulations per participant
AG.dat.ppEval <- data.frame(pp=0, totRew=0, endV.p=0, strat='init')
for(pp in 1:nPP){
for(strat in levels(AG.dat$strat)){
totRew <- AG.dat[AG.dat$pp==pp & AG.dat$trial==max(AG.dat$trial) & AG.dat$strat==strat,]$totRew
endV.p <- sum(AG.dat[AG.dat$pp==pp & AG.dat$strat==strat,]$endV==vGoal)
AG.dat.ppEval <- rbind(AG.dat.ppEval, data.frame(pp=pp, totRew=totRew, endV.p=endV.p, strat=strat))
}
}
AG.dat.ppEval <- AG.dat.ppEval[-1,]
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
gRew   <- 17    # Reward upon reaching vGoal
sCost  <- 0.14 # Points detracted from accumulated reward for each taken step
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
piMat
# Run several agents on this task, all encompassing different heuristics
AG.dat <- data.frame(pp=0, trial=0, trRew=0, nSteps=0, endV=0, totRew=0, strat='init')
for(pp in 1:nPP){
AG.dat <- rbind(AG.dat, RandomStopper( Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, LazyWaiter(    Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, RandomLengther(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, OptimalStopper(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0, piMat=piMat))
}
AG.dat <- AG.dat[-1,]
AG.dat$strat <- droplevels(AG.dat$strat)
# Summarize agent simulations per participant
AG.dat.ppEval <- data.frame(pp=0, totRew=0, endV.p=0, strat='init')
for(pp in 1:nPP){
for(strat in levels(AG.dat$strat)){
totRew <- AG.dat[AG.dat$pp==pp & AG.dat$trial==max(AG.dat$trial) & AG.dat$strat==strat,]$totRew
endV.p <- sum(AG.dat[AG.dat$pp==pp & AG.dat$strat==strat,]$endV==vGoal)
AG.dat.ppEval <- rbind(AG.dat.ppEval, data.frame(pp=pp, totRew=totRew, endV.p=endV.p, strat=strat))
}
}
AG.dat.ppEval <- AG.dat.ppEval[-1,]
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
candidates
gRew   <- 11    # Reward upon reaching vGoal
sCost  <- 0.1 # Points detracted from accumulated reward for each taken step
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
piMat
# Run several agents on this task, all encompassing different heuristics
AG.dat <- data.frame(pp=0, trial=0, trRew=0, nSteps=0, endV=0, totRew=0, strat='init')
for(pp in 1:nPP){
AG.dat <- rbind(AG.dat, RandomStopper( Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, LazyWaiter(    Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, RandomLengther(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, OptimalStopper(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0, piMat=piMat))
}
AG.dat <- AG.dat[-1,]
AG.dat$strat <- droplevels(AG.dat$strat)
# Summarize agent simulations per participant
AG.dat.ppEval <- data.frame(pp=0, totRew=0, endV.p=0, strat='init')
for(pp in 1:nPP){
for(strat in levels(AG.dat$strat)){
totRew <- AG.dat[AG.dat$pp==pp & AG.dat$trial==max(AG.dat$trial) & AG.dat$strat==strat,]$totRew
endV.p <- sum(AG.dat[AG.dat$pp==pp & AG.dat$strat==strat,]$endV==vGoal)
AG.dat.ppEval <- rbind(AG.dat.ppEval, data.frame(pp=pp, totRew=totRew, endV.p=endV.p, strat=strat))
}
}
AG.dat.ppEval <- AG.dat.ppEval[-1,]
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
candidates
gRew   <- 18    # Reward upon reaching vGoal
sCost  <- 0.16 # Points detracted from accumulated reward for each taken step
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
# Run several agents on this task, all encompassing different heuristics
AG.dat <- data.frame(pp=0, trial=0, trRew=0, nSteps=0, endV=0, totRew=0, strat='init')
for(pp in 1:nPP){
AG.dat <- rbind(AG.dat, RandomStopper( Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, LazyWaiter(    Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, RandomLengther(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, OptimalStopper(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0, piMat=piMat))
}
AG.dat <- AG.dat[-1,]
AG.dat$strat <- droplevels(AG.dat$strat)
# Summarize agent simulations per participant
AG.dat.ppEval <- data.frame(pp=0, totRew=0, endV.p=0, strat='init')
for(pp in 1:nPP){
for(strat in levels(AG.dat$strat)){
totRew <- AG.dat[AG.dat$pp==pp & AG.dat$trial==max(AG.dat$trial) & AG.dat$strat==strat,]$totRew
endV.p <- sum(AG.dat[AG.dat$pp==pp & AG.dat$strat==strat,]$endV==vGoal)
AG.dat.ppEval <- rbind(AG.dat.ppEval, data.frame(pp=pp, totRew=totRew, endV.p=endV.p, strat=strat))
}
}
AG.dat.ppEval <- AG.dat.ppEval[-1,]
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
gRew   <- 17    # Reward upon reaching vGoal
sCost  <- 0.14 # Points detracted from accumulated reward for each taken step
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
# Run several agents on this task, all encompassing different heuristics
AG.dat <- data.frame(pp=0, trial=0, trRew=0, nSteps=0, endV=0, totRew=0, strat='init')
for(pp in 1:nPP){
AG.dat <- rbind(AG.dat, RandomStopper( Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, LazyWaiter(    Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, RandomLengther(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0))
AG.dat <- rbind(AG.dat, OptimalStopper(Edges=Edges, vStart=vStart, vGoal=vGoal, nSteps=nSteps, gRew=gRew, sCost=sCost, nTrials=nTr, parNum=pp, startRew=0, piMat=piMat))
}
AG.dat <- AG.dat[-1,]
AG.dat$strat <- droplevels(AG.dat$strat)
# Summarize agent simulations per participant
AG.dat.ppEval <- data.frame(pp=0, totRew=0, endV.p=0, strat='init')
for(pp in 1:nPP){
for(strat in levels(AG.dat$strat)){
totRew <- AG.dat[AG.dat$pp==pp & AG.dat$trial==max(AG.dat$trial) & AG.dat$strat==strat,]$totRew
endV.p <- sum(AG.dat[AG.dat$pp==pp & AG.dat$strat==strat,]$endV==vGoal)
AG.dat.ppEval <- rbind(AG.dat.ppEval, data.frame(pp=pp, totRew=totRew, endV.p=endV.p, strat=strat))
}
}
AG.dat.ppEval <- AG.dat.ppEval[-1,]
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
##### Make large plot of server Agent data -----
read.csv('data/MC_Rew_BlockedSchap.csv', row.names=1)
##### Make large plot of server Agent data -----
AG.dat.ppEval <- read.csv('data/MC_Rew_BlockedSchap.csv', row.names=1)
############################################################################################################################
####################### Test script for experiments using the Blocked graph with backtracking ##############################
############################################################################################################################
# Load Packages
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(ggstance)
library(lemon)
head(AG.dat.ppEval)
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density() +
facet_grid(gRew ~ sCost)
unique(AG.dat.ppEval$gRew)
ggplot(AG.dat.ppEval[AG.dat.ppEval$gRew==47,], aes(x=totRew, col=strat)) +
geom_density() +
facet_grid(gRew ~ sCost)
ggplot(AG.dat.ppEval[AG.dat.ppEval$gRew==47,], aes(x=totRew, col=strat)) +
geom_density() +
facet_grid(sCost~)
ggplot(AG.dat.ppEval[AG.dat.ppEval$gRew==47,], aes(x=totRew, col=strat)) +
geom_density() +
facet_wrap(sCost)
?facet_wrap
ggplot(AG.dat.ppEval[AG.dat.ppEval$gRew==47,], aes(x=totRew, col=strat)) +
geom_density() +
facet_wrap(facets=sCost)
AG.dat.ppEval[AG.dat.ppEval$gRew==47,]
ggplot(AG.dat.ppEval[AG.dat.ppEval$gRew==47,], aes(x=totRew, col=strat)) +
geom_density() +
facet_wrap(facets=AG.dat.ppEval$sCost)
ggplot(AG.dat.ppEval[AG.dat.ppEval$gRew==47,], aes(x=totRew, col=strat)) +
geom_density() +
facet_wrap(facets=AG.dat.ppEval[AG.dat.ppEval$gRew==47,]$sCost)
unique(AG.dat.ppEval$gRew)
gvec <- vector('list', length=length(unique(AG.dat.ppEval$gRew)))
gvec
gvec <- vector('list', length=length(unique(AG.dat.ppEval$gRew)))
i <- 1
for(r in unique(AG.dat.ppEval$gRew)){
graphy <- ggplot(AG.dat.ppEval[AG.dat.ppEval$gRew==r,], aes(x=totRew, col=strat)) +
geom_density() +
facet_wrap(facets=AG.dat.ppEval[AG.dat.ppEval$gRew==r,]$sCost)
gvec[[i]] <- graphy
i <- i+1
}
grpahy
graphy
gvec
remove(i)
length(gvec)
pdf('data/blockedSchap_Agents.pdf', onefile=T)
for(i in 1:length(gvec)){
gvec[[i]]
}
dev.off()
print(gvec[[i]])
pdf('data/blockedSchap_Agents.pdf', onefile=T)
for(i in 1:length(gvec)){
print(gvec[[i]])
}
dev.off()
# Server executable for 15-step QuadSchap hitMat with backtracking
library(foreach)
library(parallel)
library(reshape2)
library(doParallel)
# Get different Defining Parameters
vGoal  <- 8    # Nr of goal (terminating, rewarding) node
nSteps <- 15   # Nr of steps within a miniblock (max)
#Quad Schapiro-style edge matrix
Edges <- list(c(2, 3, 4, 20),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 5),
c(2, 3, 4, 6),
c(5, 7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9, 11),
c(10,12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14,16),
c(15,17,18,19),
c(16,18,19,20),
c(16,17,19,20),
c(16,17,18,20),
c(17,18,19, 1))
# Describe unique nodes for QuadSchap
inspect.Vertices <- c(1, 2, 5, 6, 7, 16, 17)
# Set up parallel cluster
cl <- makeCluster(2)
registerDoParallel()
# Initialize hitMat
hitMat <- data.frame(vertex=rep(inspect.Vertices,each=nSteps), steps=rep(1:nSteps,length(inspect.Vertices)), goalprob=0)
hitMat
for(v in inspect.Vertices){
starttime <- Sys.time() #Get time of loop
hitMatCount <- foreach(i=1:30, .combine=rbind) %dopar% {
MCounter <- rep(0, nSteps+1)
while(Sys.time() < (starttime + 1*1*5)){ #Run for set amount of time (hr*min*sec)
path <- c(v)
while(length(path) < (nSteps+1)){
path <- c(path, sample(Edges[[tail(path,1)]],1))
if(tail(path,1)==vGoal){
MCounter[length(path)-1] <- MCounter[length(path)-1]+1
break
}else if(length(path)==(nSteps+1)){
MCounter[length(MCounter)] <- MCounter[length(MCounter)]+1
}
}
}
MCounter
}
hitMat[hitMat$vertex==v,]$goalprob <- apply(hitMatCount, 2, sum)[1:nSteps]/sum(hitMatCount)
}
hitMat
