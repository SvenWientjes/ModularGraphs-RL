# Describe identical nodes for QuadSchap
idmap   <- list(a = c(1,15), b = c(2,3,4, 12,13,14), c = c(5,11), d = c(6,10), e = c(7,9), f = c(16,20), g = c(17,18,19))
idmap.g <- list(a = c(2,3,4), b = c(7,8,9), c = c(12,13,14), d = c(17,18,19))
c.map   <- list(a = c('d','b'), b = c('a', 'c'), c = c('b','d'), d=c('a','c'))
bt.map  <- list(a = c(1,5), b = c(6,10), c= c(11,15), d=c(20,16))
# Get the hitMat
hitMat <- read.csv('data/hitMat_quadSchap_step15.csv', row.names=1)
# Get expected hits in 1 exp
nHit <- ceiling(nTr * sum(hitMat[hitMat$vertex==2,'goalprob']))
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
piMat
############################################################################################################################
########################## Generating a csv of trajectories for use in the real Experiment #################################
############################################################################################################################
library(foreach)
library(ggplot2)
library(reshape2)
library(data.table)
# Load Functions from /src/
sapply(paste0('src/',list.files('src/')), source)
# Get different Defining Parameters
nSteps <- 15   # Nr of maximum steps in a miniblock (hitMat and EVcalc will use nSteps-1; agent simulations will use nSteps!)
gRew   <- 65   # Reward upon reaching vGoal
sCost  <- 1    # Points detracted from accumulated reward for each taken step
# Get parameters for agentic simulations
nPP <- 500
nTr <- 100
#Quad Schapiro-style edge matrix
Edges <- list(c(2, 3, 4, 20),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 5),
c(2, 3, 4, 6),
c(5, 7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9, 11),
c(10,12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14,16),
c(15,17,18,19),
c(16,18,19,20),
c(16,17,19,20),
c(16,17,18,20),
c(17,18,19, 1))
Edge.list <- foreach(i = 1:length(Edges), .combine=rbind) %do% {expand.grid(i, Edges[[i]])}
# Describe unique nodes for QuadSchap
inspect.Vertices <- c(1, 2, 5, 6, 7, 16, 17)
# Describe identical nodes for QuadSchap
idmap   <- list(a = c(1,15), b = c(2,3,4, 12,13,14), c = c(5,11), d = c(6,10), e = c(7,9), f = c(16,20), g = c(17,18,19))
idmap.g <- list(a = c(2,3,4), b = c(7,8,9), c = c(12,13,14), d = c(17,18,19))
c.map   <- list(a = c('d','b'), b = c('a', 'c'), c = c('b','d'), d=c('a','c'))
bt.map  <- list(a = c(1,5), b = c(6,10), c= c(11,15), d=c(20,16))
# Get the hitMat
hitMat <- read.csv('data/hitMat_quadSchap_step15.csv', row.names=1)
# Get expected hits in 1 exp
nHit <- ceiling(nTr * sum(hitMat[hitMat$vertex==2,'goalprob']))
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
############################################################################################################################
########################## Generating a csv of trajectories for use in the real Experiment #################################
############################################################################################################################
library(foreach)
library(ggplot2)
library(reshape2)
library(data.table)
# Load Functions from /src/
sapply(paste0('src/',list.files('src/')), source)
# Get different Defining Parameters
nSteps <- 15   # Nr of maximum steps in a miniblock (hitMat and EVcalc will use nSteps-1; agent simulations will use nSteps!)
gRew   <- 65   # Reward upon reaching vGoal
sCost  <- 1    # Points detracted from accumulated reward for each taken step
# Get parameters for agentic simulations
nPP <- 500
nTr <- 100
#Quad Schapiro-style edge matrix
Edges <- list(c(2, 3, 4, 20),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 5),
c(2, 3, 4, 6),
c(5, 7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9, 11),
c(10,12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14,16),
c(15,17,18,19),
c(16,18,19,20),
c(16,17,19,20),
c(16,17,18,20),
c(17,18,19, 1))
Edge.list <- foreach(i = 1:length(Edges), .combine=rbind) %do% {expand.grid(i, Edges[[i]])}
# Describe unique nodes for QuadSchap
inspect.Vertices <- c(1, 2, 5, 6, 7, 16, 17)
# Describe identical nodes for QuadSchap
idmap   <- list(a = c(1,15), b = c(2,3,4, 12,13,14), c = c(5,11), d = c(6,10), e = c(7,9), f = c(16,20), g = c(17,18,19))
idmap.g <- list(a = c(2,3,4), b = c(7,8,9), c = c(12,13,14), d = c(17,18,19))
c.map   <- list(a = c('d','b'), b = c('a', 'c'), c = c('b','d'), d=c('a','c'))
bt.map  <- list(a = c(1,5), b = c(6,10), c= c(11,15), d=c(20,16))
# Get the hitMat
hitMat <- read.csv('data/hitMat_quadSchap_step15.csv', row.names=1)
# Get expected hits in 1 exp
nHit <- ceiling(nTr * sum(hitMat[hitMat$vertex==2,'goalprob']))
# Get the Expected Values for each interaction of previous & current node, conditional upon steps left
EVmat <- foreach(v = inspect.Vertices, .combine=rbind) %do% {
tempMat <- EVcalc(Edges=Edges, vGoal=vGoal, nSteps=nSteps-1, gRew=gRew, sCost=sCost, hitMat=hitMat, Vertex=v)
tempMat
}
piMat <- policy.generate(Edges=Edges, EVmat=EVmat, idmap=idmap)
nHit
## Actually simulate trajectories
sim.list <- foreach(i=1:nPP, .combine=append) %do% {
goalTol  <- T
stratTol <- T
while(goalTol | stratTol){
# Generate Data
full.exp <- Exp.gen(Edges=Edges, e.nodes=c(2,3,4,7,8,9,12,13,14,17,18,19), nSteps=nSteps, nTr=nTr, c.map=c.map, idmap.g=idmap.g, parNum=i)
OS.strat <- OS.apply.QS(experiment=full.exp, piMat=piMat, idmap.g=idmap.g, c.map=c.map, bt.map=bt.map, gRew=gRew, sCost=sCost, parNum=i)
MS.strat <- MS.apply.QS(experiment=full.exp, bt.map=bt.map, c.map=c.map, idmap.g=idmap.g, gRew=gRew, sCost=sCost, parNum=i)
LW.strat <- LW.apply.QS(experiment=full.exp, gRew=gRew, sCost=sCost, parNum=i)
# Perform adequacy tests
goalTol = !abs(sum(LW.strat$trRew > 0) - nHit) <= floor(0.2*nHit)
stratTol = tail(OS.strat$totRew,1) < 170 | tail(MS.strat$totRew,1) < 170 | tail(OS.strat$totRew,1) > 570 | tail(MS.strat$totRew,1) > 570 | tail(MS.strat$totRew,1) > tail(OS.strat$totRew,1)
}
list(full.exp=full.exp, AG.dat=rbind(OS.strat,MS.strat,LW.strat))
}
full.exp <- foreach(i = seq(1,nPP*2,2), .combine=rbind) %do% {sim.list[[i]]}
full.exp
AG.dat   <- foreach(i = seq(2,nPP*2,2), .combine=rbind) %do% {sim.list[[i]]}
# Summarize agent simulations per participant
AG.dat.ppEval <- data.frame(pp=0, totRew=0, endV.p=0, strat='init')
for(pp in 1:nPP){
for(strat in levels(AG.dat$strat)){
totRew <- AG.dat[AG.dat$pp==pp & AG.dat$trial==max(AG.dat$trial) & AG.dat$strat==strat,]$totRew
endV.p <- sum(AG.dat[AG.dat$pp==pp & AG.dat$strat==strat,]$trRew>=0)
AG.dat.ppEval <- rbind(AG.dat.ppEval, data.frame(pp=pp, totRew=totRew, endV.p=endV.p, strat=strat))
}
}
AG.dat.ppEval <- AG.dat.ppEval[-1,]
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
ggplot(AG.dat, aes(fill=strat)) +
geom_bar(aes(nSteps), position='dodge') +
scale_x_continuous(breaks=1:15, labels=1:15)
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
# Plot agent data!
ggplot(AG.dat.ppEval, aes(x=totRew, col=strat)) +
geom_density()
# Plot nSteps for every agent
ggplot(AG.dat, aes(fill=strat)) +
geom_bar(aes(nSteps), position='dodge') +
scale_x_continuous(breaks=1:15, labels=1:15)
full.exp
class(full.exp)
# Get experiment into data.table because it is better in every way
full.exp.d <- data.table(full.exp)
full.exp.d[,sum(v), by=pp]
full.exp.d[,length, by=c(pp,v)]
full.exp.d[,length(), by=c(pp,v)]
full.exp.d[,, by=c(pp,v)]
full.exp.d
full.exp.d[step,, by=c(pp,v)]
full.exp.d[,sum(v), by=c(pp,v)]
full.exp.d[,sum(v),by=c('pp','v')]
full.exp.d[,length,by=c('pp','v')]
full.exp.d[,c,by=c('pp','v')]
full.exp.d[,c(v),by=c('pp','v')]
full.exp.d[,.N,by=c('pp','v')]
500*20
ggplot(full.exp.d[,.N,by=c('pp','v')], aes(x=v, y=N, col=pp)) +
geom_line()
ggplot(full.exp.d[,.N,by=c('pp','v')], aes(x=v, y=N, col=pp)) +
geom_line(aes(group=pp))
ggplot(full.exp.d[,.N,by=c('pp','v')], aes(x=v, y=N, col=pp)) +
geom_line(aes(group=pp)) +
geom_vline(xintercept=5)
ggplot(full.exp.d[,.N,by=c('pp','v')], aes(x=v, y=N, col=pp)) +
geom_line(aes(group=pp)) +
geom_vline(xintercept=5) +
geom_vline(xintercept=4)
full.exp.d
full.exp.d[step!=0,]
500*100-500
500*100*16-500
500*100*16
500*100
500*100*15
727013-500
727013-500*100
ggplot(full.exp.d[step!=0,.N,by=c('pp','v')], aes(x=v, y=N, col=pp)) +
geom_line(aes(group=pp)) +
geom_vline(xintercept=5) +
geom_vline(xintercept=4)
ggplot(full.exp.d[,.N,by=c('pp','v')], aes(x=v, y=N, col=pp)) +
geom_line(aes(group=pp))
ggplot(full.exp.d[step!=0,.N,by=c('pp','v')], aes(x=v, y=N, col=pp)) +
geom_line(aes(group=pp))
#Define start and goal cluster per trial
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
startc=names(idmap.g[sapply(idmap.g, function(m){v[1] %in% m})]),
goalc=names(idmap.g[sapply(idmap.g, function(m){goal[1] %in% m})])),
by=c('pp','tr')][,c('startc','goalc')])
# Define depending leave and disappoint cluster
full.exp.d <- cbind(full.exp.d, full.exp.d[,list(step=step,
leavec=c.map[[startc[1]]][c.map[[startc[1]]]!=goalc[1]],
disc=c.map[[goalc[1]]][c.map[[goalc[1]]]!=startc[1]]),
by=c('pp','tr')][,c('leavec','disc')])
# Identify all node identities!
full.exp.d <- full.exp.d[, list('ds'  = v %in% idmap.g[[startc]],
'btg' = v %in% bt.map[[startc]][which(c.map[[startc]]==goalc)],
'btl' = v %in% bt.map[[startc]][which(c.map[[startc]]!=goalc)],
'big' = v %in% bt.map[[goalc]][which(c.map[[goalc]]==startc)],
'bil' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==startc)],
'dg'  = v %in% idmap.g[[goalc]],
'dl'  = v %in% idmap.g[[leavec]],
'bid' = v %in% bt.map[[disc]][which(c.map[[disc]]==goalc)],
'btd' = v %in% bt.map[[goalc]][which(c.map[[goalc]]!=startc)],
'dd'  = v %in% idmap.g[[disc]],
'bnd' = v %in% bt.map[[disc]][which(c.map[[disc]]==leavec)],
'bnl' = v %in% bt.map[[leavec]][which(c.map[[leavec]]==disc)]), by=c('pp','tr','step')]
# Reshape data.table into transition data instead of occupation data
full.exp.d <- cbind(full.exp.d[, .SD[step %in% 0:(.N-2)], by=c('pp','tr')], f=full.exp.d[, .SD[step %in% 1:.N,], by=c('pp','tr')][,c('ds','btg','btl','big','bil','dg','dl','bid','btd','dd','bnd','bnl')])
# Get experiment data into pre and post transition
exp.trans <- apply(full.exp.d[,4:27], 1, function(i){names(i)[which(as.logical(i))]})
full.exp.d <- cbind(full.exp.d[,1:3], V1=exp.trans[1,], V2=exp.trans[2,])
# List all unique transitions
exp.trans <- data.table(exp.trans[1,], exp.trans[2,])
exp.trans <- exp.trans[!duplicated(exp.trans),]
full.exp.d
exp.trans
# Make plots to identify if transitions deviate from random walk expectation W.R.T GOAL DIRECTEDNESS (not Edge/Node structural identity)
pL <- list()
k = c(0.5,0.25,0.75,0.25,0.75,0.25,0.25,0.25,0.25,0.75,0.25,0.25,0.75,0.25,0.5,0.75,0.5,0.25,0.75,0.25,0.25,0.25,0.75,0.5,0.25,0.75,0.25,0.25)
for(i in 1:nrow(exp.trans)){
tempDat <- merge(full.exp.d[V1==exp.trans$V1[i] & V2==exp.trans$V2[i], .N, by=c('pp','step')][order(pp,step)],
full.exp.d[V1==exp.trans$V1[i], .N, by=c('pp','step')][order(pp,step)],
by=c('pp','step'),all.y=T)[is.na(N.x),N.x:=0][,'N.p':=N.x/N.y]
tempDat$pp <- as.factor(tempDat$pp)
tempMean <- tempDat[,mean(N.p),by='step']
p = ggplot() +
geom_line(data=tempDat, aes(x=step, y=N.p, col=pp, group=pp), alpha=0.2) +
geom_line(data=tempMean, aes(x=step, y=V1)) +
geom_hline(yintercept=k[i], color='red') +
geom_smooth(data=tempDat, aes(x=step, y=N.p), method='gam', formula=y~s(x), fill='yellow') +
theme(legend.position = 'none') +
ggtitle(paste0('from ',exp.trans$V1[i],' to ',gsub('f.','',exp.trans$V2[i])))
pL[[i]] <- p
}
pdf('figs/experiment_pre/experiment_170-570.pdf')
for(i in 1:length(pL)){
print(pL[[i]])
}
dev.off()
# Coerce trajectories into suitable csv for loading into javascript
full.exp
full.exp[pp==1,]
# Coerce trajectories into suitable csv for loading into javascript
full.exp.2 <- as.data.table(full.exp)
full.exp.2[pp==1,]
full.exp.2[pp==1 & tr==1,v]
sapply(1:10, function(tri){print(full.exp.2[pp==1 & tr==tri,v])})
sapply(1:10, function(tri){full.exp.2[pp==1 & tr==tri,v]})
sapply(1:10, function(tri){print('full.exp.2[pp==1 & tr==tri,v]')})
sapply(1:10, function(tri){print('[',full.exp.2[pp==1 & tr==tri,v],']')})
sapply(1:10, function(tri){print(c('[',full.exp.2[pp==1 & tr==tri,v],']'))})
sapply(1:10, function(tri){print(paste('[',full.exp.2[pp==1 & tr==tri,v],']'))})
sapply(1:10, function(tri){print(paste0('[',full.exp.2[pp==1 & tr==tri,v],']'))})
sapply(1:10, function(tri){print(paste0('[',paste(full.exp.2[pp==1 & tr==tri,v]),']'))})
c('[', full.exp.2[pp==1 & tr==1,v], ']')
cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'))
cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=',')
match(cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=','), ',')
match(',' cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=','))
match(',', cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=','))
cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=',')
cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=',')[2]
class(cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=',')[2])
class(cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=','))
cat(c('[', full.exp.2[pp==1 & tr==1,v], ']'), sep=',')
full.exp.2[pp==1 & tr==1,v]
str(full.exp.2[pp==1 & tr==1,v])
toString(full.exp.2[pp==1 & tr==1,v])
c('[',toString(full.exp.2[pp==1 & tr==1,v]),']')
paste('[',toString(full.exp.2[pp==1 & tr==1,v]),']')
paste0('[',toString(full.exp.2[pp==1 & tr==1,v]),']')
sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')})
paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n')
paste0(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n')
paste0(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}))
paste0(c(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')})))
paste0(c(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')})), sep='\n')
print(paste0(c(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')})), sep='\n'))
print(paste(c(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')})), sep='\n'))
print(paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n'))
cat(paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n'))
paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n')
cat(paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n'), sep='\n')
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n')
test1sub
cat(test1sub)
cat(test1sub, sep='\n')
write1sub <- file('/data/test1sub.txt')
writeLines(test1sub, write1sub)
write1sub <- file('data/test1sub.txt')
writeLines(test1sub, write1sub)
close(write1sub)
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep=',\n')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep=', \n')
close(write1sub)
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep=', \n')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), ',', sep='\n')
test1sub
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n')
test1sub
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n', collapse=',')
test1sub
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep='\n', collapse=',')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), sep=',', collapse='\n')
test1sub
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub <- paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), collapse=', \n')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub <- paste0('[',paste(sapply(1:10, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), collapse=', \n'),']')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub <- paste0('[',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), collapse=', \n'),']')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub <- paste0('var trialorder = [',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==1 & tr==tri,v]),']')}), collapse=', \n'),'];')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
full.exp.2
sapply(1:5, function(tri){full.exp.2[pp==1 & tr==tri,goal][1]})
test1sub <- paste0('var trialorder = [',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==2 & tr==tri,v]),']')}), collapse=', \n'),'];')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
test1sub <- paste0('var trialorder = [',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==3 & tr==tri,v]),']')}), collapse=', \n'),'];')
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]})
paste0(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]}))
paste(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]}), collapse=', ')
paste0('var goalorder = ['paste(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]}), collapse=', '), '];')
paste0('var goalorder = [',paste(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]}), collapse=', '), '];')
write1sub <- file('data/test1sub.js')
writeLines(goal1sub, write1sub)
close(write1sub)
goal1sub <- paste0('var goalorder = [',paste(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]}), collapse=', '), '];')
write1sub <- file('data/test1sub.js')
writeLines(goal1sub, write1sub)
close(write1sub)
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
write1sub <- file('data/goal1sub.js')
writeLines(goal1sub, write1sub)
close(write1sub)
full.exp.2[pp==3 & tr==1,v]
full.exp.2[pp==3 & tr==1,v]-1
test1sub <- paste0('var trialorder = [',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==3 & tr==tri,v]-1),']')}), collapse=', \n'),'];')
test1sub
write1sub <- file('data/test1sub.js')
writeLines(test1sub, write1sub)
close(write1sub)
goal1sub <- paste0('var goalorder = [',paste(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]-1}), collapse=', '), '];')
write1sub <- file('data/goal1sub.js')
writeLines(goal1sub, write1sub)
close(write1sub)
sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==3 & tr==tri,v]-1),']')})
paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==3 & tr==tri,v]-1),']')}), collapse=', \n')
paste(sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==p & tr==tri,v]-1),']')}), collapse=', \n'),']')}), collapse= ', \n')
test2sub <- paste(sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==p & tr==tri,v]-1),']')}), collapse=', \n'),']')}), collapse= ', \n')
write1sub <- file('data/test1sub.js')
writeLines(test2sub, write1sub)
close(write1sub)
test2sub <- paste0('var trialorder = [',paste(sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==p & tr==tri,v]-1),']')}), collapse=', \n'),']')}), collapse= ', \n'), '];')
write1sub <- file('data/test1sub.js')
writeLines(test2sub, write1sub)
close(write1sub)
test2sub <- paste0('var trajectories = [',paste(sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==p & tr==tri,v]-1),']')}), collapse=', \n'),']')}), collapse= ', \n'), '];')
write1sub <- file('data/test1sub.js')
writeLines(test2sub, write1sub)
close(write1sub)
test2sub <- paste0('var trajectories = [',paste(sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){paste0('[',toString(full.exp.2[pp==p & tr==tri,v]-1),']')}), collapse=', \n'),']')}), collapse= ', \n'), '];')
write1sub <- file('data/trajectories.js')
writeLines(test2sub, write1sub)
close(write1sub)
paste(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]-1}), collapse=', ')
paste0('[',paste(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]-1}), collapse=', '),']')
sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){full.exp.2[pp==3 & tr==tri,goal][1]-1}), collapse=', '),']')})
sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){full.exp.2[pp==p & tr==tri,goal][1]-1}), collapse=', '),']')})
paste(sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){full.exp.2[pp==p & tr==tri,goal][1]-1}), collapse=', '),']')}), collapse=', \n')
paste0('var goallist = [',paste(sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){full.exp.2[pp==p & tr==tri,goal][1]-1}), collapse=', '),']')}), collapse=', \n'),'];')
goal2sub <- paste0('var goallist = [',paste(sapply(c(3,4), function(p){paste0('[',paste(sapply(1:5, function(tri){full.exp.2[pp==p & tr==tri,goal][1]-1}), collapse=', '),']')}), collapse=', \n'),'];')
write1sub <- file('data/goallist.js')
writeLines(goal2sub, write1sub)
close(write1sub)
nTr
test2sub <- paste0('var trajectories = [',paste(sapply(1:nPP, function(p){paste0('[',paste(sapply(1:nTr, function(tri){paste0('[',toString(full.exp.2[pp==p & tr==tri,v]-1),']')}), collapse=', \n'),']')}), collapse= ', \n'), '];')
write1sub <- file('data/trajectories.js')
writeLines(test2sub, write1sub)
close(write1sub)
goal2sub <- paste0('var goallist = [',paste(sapply(1:nPP, function(p){paste0('[',paste(sapply(1:nTr, function(tri){full.exp.2[pp==p & tr==tri,goal][1]-1}), collapse=', '),']')}), collapse=', \n'),'];')
write1sub <- file('data/goallist.js')
writeLines(goal2sub, write1sub)
close(write1sub)
save(full.exp, 'data/trajectories_old')
save(full.exp, '/data/trajectories_old')
save(full.exp, file='data/trajectories_old')
save(sim.list, file='data/trajectories_old')
# Server executable for 15-step QuadSchap hitMat with backtracking
library(foreach)
library(parallel)
library(reshape2)
library(doParallel)
# Get different Defining Parameters
vGoal  <- 6    # Nr of goal (terminating, rewarding) node
nSteps <- 15   # Nr of steps within a miniblock (max)
#Quad Schapiro-style edge matrix
Edges <- list(c(2, 3, 4, 20),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 5),
c(2, 3, 4, 6),
c(5, 7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9, 11),
c(10,12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14,16),
c(15,17,18,19),
c(16,18,19,20),
c(16,17,19,20),
c(16,17,18,20),
c(17,18,19, 1))
# Describe unique nodes for QuadSchap
inspect.Vertices <- c(1, 2, 5, 7, 10, 11, 12, 15, 16, 17,20)
# Set up parallel cluster
cl <- makeCluster(2)
registerDoParallel()
# Initialize hitMat
hitMat <- data.frame(vertex=rep(inspect.Vertices,each=nSteps), steps=rep(1:nSteps,length(inspect.Vertices)), goalprob=0)
for(v in inspect.Vertices){
starttime <- Sys.time() #Get time of loop
hitMatCount <- foreach(i=1:2, .combine=rbind) %dopar% {
MCounter <- rep(0, nSteps+1)
while(Sys.time() < (starttime + 1*2*60)){ #Run for set amount of time (hr*min*sec)
path <- c(v)
while(length(path) < (nSteps+1)){
path <- c(path, sample(Edges[[tail(path,1)]],1))
if(tail(path,1)==vGoal){
MCounter[length(path)-1] <- MCounter[length(path)-1]+1
break
}else if(length(path)==(nSteps+1)){
MCounter[length(MCounter)] <- MCounter[length(MCounter)]+1
}
}
}
MCounter
}
hitMat[hitMat$vertex==v,]$goalprob <- apply(hitMatCount, 2, sum)[1:nSteps]/sum(hitMatCount)
}
hitMat
