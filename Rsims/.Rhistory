varData <- full.exp[!is.na(sym.id),.SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id)
][,meanC:=mean(V1), by=.(pol.type,sym.id)]
varData
varData <- full.exp[!is.na(sym.id),.SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id)
][,mean(V1), by=.(pol.type,sym.id)][,.(V1=meanC)]
varData[,sdC:=full.exp[!is.na(sym.id),.SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id)
][,sd(V1), by=.(pol.type,sym.id)]$V1]
varData
varData <- full.exp[!is.na(sym.id),.SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id)
][,mean(V1), by=.(pol.type,sym.id)]
varData
varData$sdC <- full.exp[!is.na(sym.id),.SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id)
][,sd(V1),by=.(pol.type,sym.id)]
varData
full.exp[!is.na(sym.id),.SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id)
][,sd(V1),by=.(pol.type,sym.id)]
full.exp
varData$sdC <- full.exp[!is.na(sym.id),.SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id)
][,sd(V1),by=.(pol.type,sym.id)]$V1
varData
# Plot prop. of betting choices per sym.id interaction with stepsleft
ggplot(varData, aes(x=sym.id, y=V1, fill=pol.type)) +
geom_bar(stat='identity', position=position_dodge())
# Plot prop. of betting choices per sym.id interaction with stepsleft
ggplot(varData, aes(x=sym.id, y=V1, fill=pol.type)) +
geom_bar(stat='identity', position=position_dodge()) +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC), width=.2,
position=position_dodge(.9))
full.exp[!is.na(sym.id), .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepProp <- full.exp[!is.na(sym.id), .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepProp[,c('meanC','sdC'):=list(mean(V1),sd(V1)), by=.(pol.type,sym.id,stepsleft)]
stopProp
stepProp
stepProp[pol.type=='deep' & sym.id=='a' & stepsleft==14]
stepProp[pol.type=='deep' & sym.id=='a' & stepsleft==13]
stepProp
stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat <- stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat$sdC <- stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]$V1
stepDat
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id))+
geom_line() +
geom_point()
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point()
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
facet_grid(pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
facet_grid(stepDat$pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
facet_grid(stepDat$pol.type~)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
facet_wrap(stepDat$pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
facet_wrap(pol.type)
stepDat
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point()
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
facet_grid(stepDat$pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
facet_grid(pol.type~)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
facet_grid(~pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC), width=.2,
position=position_dodge(0.05)) +
facet_grid(~pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC),
position=position_dodge(0.05)) +
facet_grid(~pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(~pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(sym.id~pol.type)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
noiseL <- 0.3 # proportion of non-normative choices
# Get non-normative choices
full.exp[!is.na(opt.choice), c('mod.choice.e','opt.choice.e'):=list(sample(c(mod.choice,-mod.choice),size=1,prob=c(1-noiseL,noiseL)),
sample(c(opt.choice,-opt.choice),size=1,prob=c(1-noiseL,noiseL))
), by=.(pp,tr,stepsleft)]
stepProp <- full.exp[!is.na(sym.id), .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepDat <- stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat$sdC <- stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]$V1
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
noiseL <- 0.5 # proportion of non-normative choices
# Get non-normative choices
full.exp[!is.na(opt.choice), c('mod.choice.e','opt.choice.e'):=list(sample(c(mod.choice,-mod.choice),size=1,prob=c(1-noiseL,noiseL)),
sample(c(opt.choice,-opt.choice),size=1,prob=c(1-noiseL,noiseL))
), by=.(pp,tr,stepsleft)]
stepProp <- full.exp[!is.na(sym.id), .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepDat <- stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat$sdC <- stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]$V1
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
noiseL <- 0.4 # proportion of non-normative choices
# Get non-normative choices
full.exp[!is.na(opt.choice), c('mod.choice.e','opt.choice.e'):=list(sample(c(mod.choice,-mod.choice),size=1,prob=c(1-noiseL,noiseL)),
sample(c(opt.choice,-opt.choice),size=1,prob=c(1-noiseL,noiseL))
), by=.(pp,tr,stepsleft)]
stepProp <- full.exp[!is.na(sym.id), .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepDat <- stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat$sdC <- stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]$V1
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
stepProp
stepProp <- full.exp[!is.na(sym.id) & pp%in%1:100, .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepDat <- stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat$sdC <- stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]$V1
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
noiseL <- 0.3 # proportion of non-normative choices
# Get non-normative choices
full.exp[!is.na(opt.choice), c('mod.choice.e','opt.choice.e'):=list(sample(c(mod.choice,-mod.choice),size=1,prob=c(1-noiseL,noiseL)),
sample(c(opt.choice,-opt.choice),size=1,prob=c(1-noiseL,noiseL))
), by=.(pp,tr,stepsleft)]
stepProp <- full.exp[!is.na(sym.id) & pp%in%1:100, .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepDat <- stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat$sdC <- stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]$V1
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
noiseL <- 0.1 # proportion of non-normative choices
# Get non-normative choices
full.exp[!is.na(opt.choice), c('mod.choice.e','opt.choice.e'):=list(sample(c(mod.choice,-mod.choice),size=1,prob=c(1-noiseL,noiseL)),
sample(c(opt.choice,-opt.choice),size=1,prob=c(1-noiseL,noiseL))
), by=.(pp,tr,stepsleft)]
stepProp <- full.exp[!is.na(sym.id) & pp%in%1:500, .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepDat <- stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat$sdC <- stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]$V1
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
stepProp
# Get full.exp data into stan-appropriate data
full.exp
# Get full.exp data into stan-appropriate data
full.exp[opt.choice.e==1,.N,by=.(pp,sym.id,stepsleft)]
# Get full.exp data into stan-appropriate data
full.exp[,.SD[opt.choice.e==1,.N],by=.(pp,sym.id,stepsleft)]
# Get full.exp data into stan-appropriate data
full.exp[,list(.SD[opt.choice.e==1,.N], .N),by=.(pp,sym.id,stepsleft)]
# Get full.exp data into stan-appropriate data
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pp,sym.id,stepsleft)]
500*18*14
500*11*14
# Get full.exp data into stan-appropriate data
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pol.type,pp,sym.id,stepsleft)]
# Get full.exp data into stan-appropriate data
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pp,sym.id,stepsleft)
][,interaction(pol.type,sym.id)]
interaction('a','b')
# Get full.exp data into stan-appropriate data
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pp,sym.id,stepsleft)
][,reg.id=interaction(pol.type,sym.id), by=.(pol.type,pp,sym.id.stepsleft)]
# Get full.exp data into stan-appropriate data
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pp,sym.id,stepsleft)
][,list(reg.id=interaction(pol.type,sym.id)), by=.(pol.type,pp,sym.id.stepsleft)]
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pp,sym.id,stepsleft)
]
# Get full.exp data into stan-appropriate data
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pol.type,pp,sym.id,stepsleft)
][,list(reg.id=interaction(pol.type,sym.id)), by=.(pol.type,pp,sym.id.stepsleft)]
# Get full.exp data into stan-appropriate data
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pol.type,pp,sym.id,stepsleft)
][,list(reg.id=interaction(pol.type,sym.id)), by=.(pol.type,pp,sym.id,stepsleft)]
full.exp
full.exp[opt.choice.e==-1, opt.choice.e=0
][,list(reg.id=interaction(pol.type,sym.id)),by=.(pol.type,pp,sym.id,stepsleft)]
full.exp[opt.choice.e==-1, list(opt.choice.e=0)
][,list(reg.id=interaction(pol.type,sym.id)),by=.(pol.type,pp,sym.id,stepsleft)]
full.exp[opt.choice.e==-1, list(opt.choice.e=0)
]
full.exp
full.exp[opt.choice.e==-1, list(opt.choice.e=0), by=.(pol.type,pp,sym.id,stepsleft)
][,list(reg.id=interaction(pol.type,sym.id)),by=.(pol.type,pp,sym.id,stepsleft)]
full.exp[opt.choice.e==-1, list(opt.choice.e=0), by=.(pol.type,pp,sym.id,stepsleft)
][,list(reg.id=interaction(pol.type,sym.id),opt.choice.e),by=.(pol.type,pp,sym.id,stepsleft)]
full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice=0]
full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0]
full.exp
full.exp[tr==2]
full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)]
full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)]
length(unique(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)]$nodeID))
unique(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)]$nodeID)
levels(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)]$nodeID)
length(levels(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)]$nodeID))
install.packages("fastDummies")
full.exp
full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
]
full.exp
full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)]
fastDummies::dummy_cols(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)], select_columns=c('pp,nodeID,stepsleft'))
fastDummies::dummy_cols(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)], select_columns=c('pp','nodeID','stepsleft'))
fastDummies::dummy_cols(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)], select_columns=c('nodeID','stepsleft'))
fastDummies::dummy_cols(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)], select_columns=c('nodeID'))
stanDat <- fastDummies::dummy_cols(full.exp[, stan.opt.choice:=opt.choice.e, by=.(pol.type,pp,sym.id,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp, nodeID=interaction(pol.type,sym.id), stepsleft, stan.opt.choice)], select_columns=c('nodeID'))
stanDat
stanDat[,5:]
stanDat[,5:8]
stanDat[,5:12]
stanDat[,5:21]
stanDat[,5:22]
stanDat[,5:23]
stanDat[,5:24]
stanDat[,5:25]
full.exp
# Get full.exp data into stan-appropriate data
full.exp[,list(betc=.SD[opt.choice.e==1,.N], totc=.N),by=.(pol.type,pp,sym.id,stepsleft)
][,list(reg.id=interaction(pol.type,sym.id)), by=.(pol.type,pp,sym.id,stepsleft)]
full.exp
levels(full.exp$pol.type)
full.exp$pol.type
unique(full.exp$pol.type)
unique(full.exp$stepsleft)
full.exp
full.exp[pp, max]
max(full.exp[,pp])
full.exp(!is.na(opt.choice.e))
full.exp[(]!is.na(opt.choice.e)]
full.exp[!is.na(opt.choice.e)]
full.exp[!is.na(opt.choice.e), opt.choice.e]
full.exp[!is.na(opt.choice.e), stan.opt.choice]
full.exp[!is.na(opt.choice.e),pp]
full.exp[!is.na(opt.choice.e),stepsleft]
# Get full.exp data into stan-appropriate data
full.exp[,stan.opt.choice:=opt.choice.e][opt.choice.e==-1, stan.opt.choice:=0]
full.exp
fastDummies::dummy_cols(full.exp, select_columns=c('pol.type','sym.id'))
full.exp
full.exp[,reg.id:=interaction(pol.type,sym.id)]
full.exp
levels(full.exp$reg.id)
unique(full.exp$reg.id)
length(unique(full.exp$reg.id))
full.exp[,reg.id:=interaction(pol.type,sym.id)
][!is.na(reg.id)]
levels(full.exp[,reg.id:=interaction(pol.type,sym.id)
][!is.na(reg.id)]$reg.id)
unique(full.exp[,reg.id:=interaction(pol.type,sym.id)
][!is.na(reg.id)]$reg.id)
full.exp[,reg.id:=interaction(pol.type,sym.id)
][!is.na(reg.id)
][,reg.id:=droplevels(reg.id)]
full.exp
levels(full.exp$reg.id)
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
full.exp[,reg.id:=interaction(pol.type,sym.id)
]
full.exp
x <- full.exp[,reg.id:=interaction(pol.type,sym.id)][!is.na(reg.id),reg.id]
x
x <- droplevels(x)
x
length(levels(x))
x.d <- fastDummies::dummy_cols(x)
x.d
ncol(x.d)
x
x.d
x.d[,2:19]
standata_list <- list(
P = max(full.exp[,pp]),
N = nrow(full.exp[!is.na(opt.choice.e)]),
K = length(levels(x)),
y = full.exp[!is.na(opt.choice.e), stan.opt.choice],
x = x.d[,2:19],
pn = full.exp[!is.na(opt.choice.e),pp],
sl = full.exp[!is.na(opt.choice.e),stepsleft]
)
fit1 <- stan(
file = "src/sim1test.stan",
data = standata_list,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 1,
refresh = 0
)
0 %in% full.exp[!is.na(opt.choice.e),stepsleft]
standata_list <- list(
P = max(full.exp[,pp]),
N = nrow(full.exp[!is.na(opt.choice.e)]),
K = length(levels(x)),
y = full.exp[!is.na(opt.choice.e), stan.opt.choice],
x = x.d[,2:19],
pn = full.exp[!is.na(opt.choice.e),pp],
sl = full.exp[!is.na(opt.choice.e),stepsleft]
)
fit1 <- stan(
file = "src/sim1test.stan",
data = standata_list,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 1,
refresh = 0
)
x.d
fit1
stepProp <- full.exp[!is.na(sym.id) & pp%in%1:20, .SD[opt.choice.e==1,.N]/.N, by=.(pp,pol.type,sym.id,stepsleft)]
stepDat <- stepProp[,mean(V1), by=.(pol.type,sym.id,stepsleft)]
stepDat$sdC <- stepProp[,sd(V1), by=.(pol.type,sym.id,stepsleft)]$V1
ggplot(stepDat, aes(x=stepsleft, y=V1, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=V1-sdC, ymax=V1+sdC)) +
facet_grid(pol.type~sym.id)
full.exp[pp%in%1:20 & !is.na(opt.choice.e), stan.opt.choice]
nrow(full.exp[pp%in%1:20 & !is.na(opt.choice.e)])
x.d
x <- full.exp[pp%in%1:20,reg.id:=interaction(pol.type,sym.id)][!is.na(reg.id),reg.id]
x <- droplevels(x)
x.d <- fastDummies::dummy_cols(x)
x.d
full.exp
x
x
x <- full.exp[,reg.id:=interaction(pol.type,sym.id)][!is.na(reg.id) & pp%in%1:20,reg.id]
x
x <- droplevels(x)
x.d <- fastDummies::dummy_cols(x)
x.d
standata_list <- list(
P = 20,
N = nrow(full.exp[pp%in%1:20 & !is.na(opt.choice.e)]),
K = length(levels(x)),
y = full.exp[pp%in%1:20 & !is.na(opt.choice.e), stan.opt.choice],
x = x.d[,2:19],
pn = full.exp[pp%in%1:20 & !is.na(opt.choice.e),pp],
sl = full.exp[pp%in%1:20 & !is.na(opt.choice.e),stepsleft]
)
fit1 <- stan(
file = "src/sim1test.stan",
data = standata_list,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 2,
refresh = 0
)
fit1 <- stan(
file = "src/sim1test.stan",
data = standata_list,
chains = 2,
warmup = 10,
iter = 20,
cores = 2,
refresh = 0
)
x <- full.exp[,reg.id:=interaction(pol.type,sym.id)][!is.na(reg.id) & pp%in%1:2,reg.id]
x <- droplevels(x)
x.d <- fastDummies::dummy_cols(x)
x.d
standata_list <- list(
P = 2,
N = nrow(full.exp[pp%in%1:2 & !is.na(opt.choice.e)]),
K = length(levels(x)),
y = full.exp[pp%in%1:2 & !is.na(opt.choice.e), stan.opt.choice],
x = x.d[,2:19],
pn = full.exp[pp%in%1:2 & !is.na(opt.choice.e),pp],
sl = full.exp[pp%in%1:2 & !is.na(opt.choice.e),stepsleft]
)
fit1 <- stan(
file = "src/sim1test.stan",
data = standata_list,
chains = 2,
warmup = 10,
iter = 20,
cores = 2,
refresh = 0
)
fit1
x.d
fit1 <- stan(
file = "src/sim1test.stan",
data = standata_list,
chains = 2,
warmup = 10,
iter = 20,
cores = 2,
verbose = T
)
fit1
fit1 <- stan(
file = "src/sim1test.stan",
data = standata_list,
chains = 2,
warmup = 10,
iter = 20,
cores = 2,
verbose = T
)
fit1
fit1$pi
fit1$'pi[1'
fit1$'pi[1]'
fit1$`pi[10]`
draws <- extract(fit1)
draws
summary(fit1)
summary(fit1, pi)
summary(fit1, pars='pi')
library(bayesplot)
install.packages("bayesplot")
library(bayesplot)
mcmc_areas()
mcmc_a?rlang
?rlang
R --version
R.Version()
library(rlang)
detach(rlang)
detach("package:rlang", unload=TRUE)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
############################################################################################################################
########################## Script for playing around with gamble choices in the QuadSchap ##################################
############################################################################################################################
library(foreach)
library(ggplot2)
library(reshape2)
library(data.table)
library(zoo)
library(rstan)
library(bayesplot)
