chains = 4,
warmup = 500,
iter = 1000,
cores = 2,
verbose = T
)
spsum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)
plot(X, spsum[grepl('Y_hat',rn, fixed=T),mean])
plot(X, spsum[grepl('Y_hat',rn, fixed=T),mean])
num_knots <- 3
spline_degree <- 2
num_basis <- num_knots + spline_degree - 1
X <- sample(seq(from=1, to=15, by=1), replace=T, size=1000)
num_data <- length(X)
knots <- unname(quantile(X,probs=seq(from=0, to=1, length.out = num_knots)))
a0 <- 0.2
a <- rnorm(num_basis, 0, 1)
B_true <- t(bs(X, df=num_basis, degree=spline_degree, intercept = TRUE))
#Y_true <- as.vector(a0*X + a%*%B_true)
Y_true <- rep(-2,num_data); Y_true[X>1] <- 2
Y <- Y_true + rnorm(length(X), 0, 0.2)
splinedat <- list(
num_data = num_data,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree,
Y = Y,
X = X
)
splinefit <- stan(
file = "src/Stan/splinetest.stan",
data = splinedat,
chains = 4,
warmup = 500,
iter = 1000,
cores = 2,
verbose = T
)
spsum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)
plot(X, spsum[grepl('Y_hat',rn, fixed=T),mean])
num_knots <- 3
spline_degree <- 4
num_basis <- num_knots + spline_degree - 1
X <- sample(seq(from=1, to=15, by=1), replace=T, size=1000)
num_data <- length(X)
knots <- unname(quantile(X,probs=seq(from=0, to=1, length.out = num_knots)))
a0 <- 0.2
a <- rnorm(num_basis, 0, 1)
B_true <- t(bs(X, df=num_basis, degree=spline_degree, intercept = TRUE))
#Y_true <- as.vector(a0*X + a%*%B_true)
Y_true <- rep(-2,num_data); Y_true[X>1] <- 2
Y <- Y_true + rnorm(length(X), 0, 0.2)
splinedat <- list(
num_data = num_data,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree,
Y = Y,
X = X
)
splinefit <- stan(
file = "src/Stan/splinetest.stan",
data = splinedat,
chains = 4,
warmup = 500,
iter = 1000,
cores = 2,
verbose = T
)
spsum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)
plot(X, spsum[grepl('Y_hat',rn, fixed=T),mean])
num_knots <- 4
spline_degree <- 3
num_basis <- num_knots + spline_degree - 1
X <- sample(seq(from=1, to=15, by=1), replace=T, size=1000)
num_data <- length(X)
knots <- unname(quantile(X,probs=seq(from=0, to=1, length.out = num_knots)))
a0 <- 0.2
a <- rnorm(num_basis, 0, 1)
B_true <- t(bs(X, df=num_basis, degree=spline_degree, intercept = TRUE))
#Y_true <- as.vector(a0*X + a%*%B_true)
Y_true <- rep(-2,num_data); Y_true[X>1] <- 2
Y <- Y_true + rnorm(length(X), 0, 0.2)
splinedat <- list(
num_data = num_data,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree,
Y = Y,
X = X
)
splinefit <- stan(
file = "src/Stan/splinetest.stan",
data = splinedat,
chains = 4,
warmup = 500,
iter = 1000,
cores = 2,
verbose = T
)
spsum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)
plot(X, spsum[grepl('Y_hat',rn, fixed=T),mean])
knots
spsum[grepl('Y_hat',rn, fixed=T),mean]
spsum
num_knots <- 4
spline_degree <- 3
num_basis <- num_knots + spline_degree - 1
X <- sample(seq(from=1, to=15, by=1), replace=T, size=1000)
num_data <- length(X)
knots <- unname(quantile(X,probs=seq(from=0, to=1, length.out = num_knots)))
a0 <- 0.2
a <- rnorm(num_basis, 0, 1)
B_true <- t(bs(X, df=num_basis, degree=spline_degree, intercept = TRUE))
#Y_true <- as.vector(a0*X + a%*%B_true)
Y_true <- rep(-2,num_data); Y_true[X>1] <- 2
Y <- Y_true + rnorm(length(X), 0, 0.2)
splinedat <- list(
num_data = num_data,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree,
Y = Y,
X = X
)
splinefit <- stan(
file = "src/Stan/splinetest.stan",
data = splinedat,
chains = 4,
warmup = 500,
iter = 1000,
cores = 2,
verbose = T
)
spsum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)
spsum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)
plot(X, spsum[grepl('Y_hat',rn, fixed=T),mean])
plot(X, Y_true)
plot(X, spsum[grepl('Y_hat',rn, fixed=T),mean])
############################################################################################################################
####################### Script for fitting Stan models to different betting datasets QuadMod ###############################
############################################################################################################################
library(foreach)
library(ggplot2)
library(reshape2)
library(data.table)
library(zoo)
library(rstan)
library(bayesplot)
library(stringr)
library(bayestestR)
# Load Functions from /src/
load('data/QuadMod-Bet_testDat-1.RData')
sapply(paste0('src/',list.files('src/')), source)
# Define point multiplier for winning
winM   <- 5
startP <- 5
nVisit <- 15
nTr    <- 100
nPP    <- 500
## Model that gets linear regressions with free intercept ----
noiseL <- 0.1
stepreg.exp <- full.exp[pp%in%1:100 & !is.na(opt.choice),list(sym.id,
pol.type=if(trtype=='deep'){'deep'}else{'bottleneck'},
stan.opt.choice=sample(c(opt.choice, -opt.choice), prob=c(1-noiseL, noiseL), size=1)),by=.(pp,tr,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp,tr,stepsleft,stan.opt.choice, reg.id=interaction(pol.type,sym.id))
][,reg.id:=droplevels(reg.id)
][,list(pp,tr,stepsleft,stan.opt.choice,reg.id,reg.code=match(reg.id,levels(reg.id)))
][,stepsleft:=stepsleft+1]
stepreg.exp
stepreg.exp
remove(stepreg.exp)
## Model that uses splines to estimate ----
noiseL <- 0.1
splinereg.exp <- full.exp[pp%in%1:10 & !is.na(opt.choice),list(sym.id,
pol.type=if(trtype=='deep'){'deep'}else{'bottleneck'},
stan.opt.choice=sample(c(opt.choice, -opt.choice), prob=c(1-noiseL, noiseL), size=1)),by=.(pp,tr,stepsleft)
][stan.opt.choice==-1, stan.opt.choice:=0
][,list(pp,tr,stepsleft,stan.opt.choice, reg.id=interaction(pol.type,sym.id))
][,reg.id:=droplevels(reg.id)
][,list(pp,tr,stepsleft,stan.opt.choice,reg.id,reg.code=match(reg.id,levels(reg.id)))
][,stepsleft:=stepsleft+1]
splinereg.exp
splinereg.exp
num_knots <- 4
spline_degree <- 3
knots <- unname(quantile(splinereg.exp$stepsleft,probs=seq(from=0, to=1, length.out = num_knots)))
splinedat <- list(
P  = max(stepreg.exp$pp),
K  = max(stepreg.exp$reg.code),
M  = nrow(stepreg.exp),
S  = length(unique(stepreg.exp$stepsleft)),
Vx = stepreg.exp$reg.code,
y  = stepreg.exp$stan.opt.choice,
Pn = stepreg.exp$pp,
Sl = stepreg.exp$stepsleft,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree,
)
knots
splinedat <- list(
P  = max(splinereg.exp$pp),
K  = max(splinereg.exp$reg.code),
M  = nrow(splinereg.exp),
S  = length(unique(splinereg.exp$stepsleft)),
Vx = splinereg.exp$reg.code,
y  = splinereg.exp$stan.opt.choice,
Pn = splinereg.exp$pp,
Sl = splinereg.exp$stepsleft,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree,
)
splinedat <- list(
P  = max(splinereg.exp$pp),
K  = max(splinereg.exp$reg.code),
M  = nrow(splinereg.exp),
S  = length(unique(splinereg.exp$stepsleft)),
Vx = splinereg.exp$reg.code,
y  = splinereg.exp$stan.opt.choice,
Pn = splinereg.exp$pp,
Sl = splinereg.exp$stepsleft,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree
)
splinedat <- list(
P  = max(splinereg.exp$pp),
K  = max(splinereg.exp$reg.code),
M  = nrow(splinereg.exp),
S  = length(unique(splinereg.exp$stepsleft)),
Vx = splinereg.exp$reg.code,
y  = splinereg.exp$stan.opt.choice,
Pn = splinereg.exp$pp,
Sl = splinereg.exp$stepsleft,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree
)
splinefit <- stan(
file = "src/Stan/spline1test1.stan",
data = splinedat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 4,
verbose = T
)
splinefit <- stan(
file = "src/Stan/spline1test1.stan",
data = splinedat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 4,
verbose = T
)
splinefit <- stan(
file = "src/Stan/spline1test1.stan",
data = splinedat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 4,
verbose = T
)
splinefit <- stan(
file = "src/Stan/spline1test1.stan",
data = splinedat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 4,
verbose = T
)
splinedat <- list(
P  = max(splinereg.exp$pp),
K  = max(splinereg.exp$reg.code),
M  = nrow(splinereg.exp),
S  = length(unique(splinereg.exp$stepsleft)),
Vx = splinereg.exp$reg.code,
y  = splinereg.exp$stan.opt.choice,
Pn = splinereg.exp$pp,
Sl = splinereg.exp$stepsleft,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree
)
splinefit <- stan(
file = "src/Stan/spline1test1.stan",
data = splinedat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 4,
verbose = T
)
splinedat <- list(
P  = max(splinereg.exp$pp),
K  = max(splinereg.exp$reg.code),
M  = nrow(splinereg.exp),
S  = length(unique(splinereg.exp$stepsleft)),
Vx = splinereg.exp$reg.code,
y  = splinereg.exp$stan.opt.choice,
Pn = splinereg.exp$pp,
Sl = splinereg.exp$stepsleft,
num_knots = num_knots,
knots = knots,
spline_degree = spline_degree
)
splinefit <- stan(
file = "src/Stan/spline1test1.stan",
data = splinedat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 4,
verbose = T
)
splinefit
spinesum <- summary(splinefit)$summary
spinesum
spinesum <- as.data.table(summary(splinefit)$summary)
spinesum
spinesum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)
spinesum
spinesum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)[grepl('Y_hat',rn, fixed=T),mean]
spinesum
spinesum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)[grepl('Y_hat',rn, fixed=T),]
spinesum
splinereg.exp$reg.id
which(splinereg.exp$stepsleft==15)
which(splinereg.exp$stepsleft==15 & splinereg.exp$reg.code==1)
as.data.table(summary(splinefit)$summary, keep.rownames = T)[grepl('Y_hat',rn, fixed=T),][which(splinereg.exp$stepsleft==15 & splinereg.exp$reg.code==1),]
spinesum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)[grepl('Y_hat',rn, fixed=T),]
spinesum
remove(spinesum)
splinesum <- as.data.table(summary(splinefit)$summary, keep.rownames = T)[grepl('Y_hat',rn, fixed=T),]
splinesum
which(splinereg.exp$stepsleft==15 & splinereg.exp$reg.code==1)
unique(splinereg.exp$reg.code)
levels(splinereg.exp$reg.id)
splinereg.exp$reg.id
unique(splinereg.exp$stepsleft)
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)
}
}
which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)
splineplot <- data.table(reg.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1]
splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]
remove(splineplot)
splineplot.dat <- data.table(reg.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
rbind(splineplot.dat, data.table(reg.id=id, stepsleft=s, mean=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$mean,
minC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'2.5%', maxC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'97.5%'))
}
}
splineplot.dat
splineplot.dat <- data.table(reg.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
splineplot.dat <- rbind(splineplot.dat, data.table(reg.id=id, stepsleft=s, mean=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$mean,
minC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'2.5%', maxC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'97.5%'))
}
}
splineplot.dat
splineplot.dat <- splineplot.dat[-1,]
splineplot.dat
unique(splineplot.dat$reg.id)
strsplit('wow.nice', '[.]')
strsplit('wow.nice', '[.]')[1]
strsplit('wow.nice', '[.]')[[1]]
strsplit('wow.nice', '[.]')[[1]][1]
splineplot.dat <- data.table(pol.type='a', sym.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
splineplot.dat <- rbind(splineplot.dat, data.table(pol.type=strsplit(id, '[.]')[[1]][1], sym.id=stsplit(id, '[.]')[[1]][2], stepsleft=s, mean=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$mean,
minC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'2.5%', maxC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'97.5%'))
}
}
splineplot.dat <- data.table(pol.type='a', sym.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
splineplot.dat <- rbind(splineplot.dat, data.table(pol.type=strsplit(id, '[.]')[[1]][1], sym.id=strplit(id, '[.]')[[1]][2], stepsleft=s, mean=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$mean,
minC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'2.5%', maxC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'97.5%'))
}
}
splineplot.dat <- data.table(pol.type='a', sym.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
splineplot.dat <- rbind(splineplot.dat, data.table(pol.type=strsplit(id, '[.]')[[1]][1], sym.id=strsplit(id, '[.]')[[1]][2], stepsleft=s, mean=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$mean,
minC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'2.5%', maxC=splinesum[which(splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'97.5%'))
}
}
splineplot.dat
splineplot.dat <- splineplot.dat[-1,]
ggplot(splineplot.dat, aes(x=stepsleft, y=mean, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=minC, ymax=maxC, group=sym.id, x=stepsleft)) +
facet_grid(pol.type~sym.id)
splineplot.dat[,c('mean','minC','maxC'):=list(boot:inv.logit(mean), boot:inv.logit(minC), boot:inv.logit(maxC)), by=.(pol.type,sym.id,stepsleft)]
splineplot.dat[,c('mean','minC','maxC'):=list(boot::inv.logit(mean), boot::inv.logit(minC), boot::inv.logit(maxC)), by=.(pol.type,sym.id,stepsleft)]
ggplot(splineplot.dat, aes(x=stepsleft, y=mean, group=sym.id, col=sym.id))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=minC, ymax=maxC, group=sym.id, x=stepsleft)) +
facet_grid(pol.type~sym.id)
splinefit$samples
install.packages("bridgesampling")
library(bridgesampling)
bridgesampling(splinefit)
bridge_sampler(splinefit)
splinefit
tail(splinefit)
splinefit$lp__
splinefit[nrow(splinefit),]
splinefit2 <- stan(
file = "src/Stan/spline1test2.stan",
data = splinedat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 4,
verbose = T
)
splinesum2 <- as.data.table(summary(splinefit2)$summary, keep.rownames = T)[grepl('Y_hat',rn, fixed=T),]
splinesum2
splineplot.dat2 <- data.table(pp=0, pol.type='a', sym.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
for(p in 1:10){
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
splineplot.dat <- rbind(splineplot.dat2, data.table(pp=p, pol.type=strsplit(id, '[.]')[[1]][1], sym.id=strsplit(id, '[.]')[[1]][2], stepsleft=s, mean=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$mean,
minC=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'2.5%', maxC=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'97.5%'))
}
}
}
splineplot.dat2
splineplot.dat2 <- data.table(pp=0, pol.type='a', sym.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
for(p in 1:10){
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
splineplot.dat2 <- rbind(splineplot.dat2, data.table(pp=p, pol.type=strsplit(id, '[.]')[[1]][1], sym.id=strsplit(id, '[.]')[[1]][2], stepsleft=s, mean=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$mean,
minC=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'2.5%', maxC=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'97.5%'))
}
}
}
splineplot.dat <- splineplot.dat[-1,]
splineplot.dat2 <- splineplot.dat2[-1,]
splineplot.dat2[,c('mean','minC','maxC'):=list(boot::inv.logit(mean), boot::inv.logit(minC), boot::inv.logit(maxC)), by=.(pp,pol.type,sym.id,stepsleft)]
ggplot(splineplot.dat2, aes(x=stepsleft, y=mean, group=sym.id, col=pp))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=minC, ymax=maxC, group=sym.id, x=stepsleft)) +
facet_grid(pol.type~sym.id)
splineplot.dat2[,c('mean','minC','maxC'):=list(boot::inv.logit(mean), boot::inv.logit(minC), boot::inv.logit(maxC)), by=.(pp,pol.type,sym.id,stepsleft)
][,pp:=as.factor(pp)]
splineplot.dat2 <- data.table(pp=0, pol.type='a', sym.id='a', stepsleft=0, mean=0, minC=0, maxC=0)
for(p in 1:10){
for(id in levels(splinereg.exp$reg.id)){
for(s in unique(splinereg.exp$stepsleft)){
splineplot.dat2 <- rbind(splineplot.dat2, data.table(pp=p, pol.type=strsplit(id, '[.]')[[1]][1], sym.id=strsplit(id, '[.]')[[1]][2], stepsleft=s, mean=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$mean,
minC=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'2.5%', maxC=splinesum2[which(splinereg.exp$pp==p & splinereg.exp$reg.id==id & splinereg.exp$stepsleft==s)[1],]$'97.5%'))
}
}
}
splineplot.dat2
splineplot.dat2 <- splineplot.dat2[-1,]
splineplot.dat2[,c('mean','minC','maxC'):=list(boot::inv.logit(mean), boot::inv.logit(minC), boot::inv.logit(maxC)), by=.(pp,pol.type,sym.id,stepsleft)
][,pp:=as.factor(pp)]
ggplot(splineplot.dat2, aes(x=stepsleft, y=mean, group=sym.id, col=pp))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=minC, ymax=maxC, group=sym.id, x=stepsleft)) +
facet_grid(pol.type~sym.id)
ggplot(splineplot.dat2, aes(x=stepsleft, y=mean, group=sym.id, col=pp))+
geom_line(position=position_dodge()) +
geom_point() +
geom_errorbar(aes(ymin=minC, ymax=maxC, group=sym.id, x=stepsleft)) +
facet_grid(pol.type~sym.id)
ggplot(splineplot.dat2, aes(x=stepsleft, y=mean, group=sym.id, col=pp))+
geom_line() +
geom_point(position=position_dodge()) +
geom_errorbar(aes(ymin=minC, ymax=maxC, group=sym.id, x=stepsleft)) +
facet_grid(pol.type~sym.id)
ggplot(splineplot.dat2, aes(x=stepsleft, y=mean, group=sym.id, col=pp))+
geom_line() +
geom_point(position=position_dodge2()) +
geom_errorbar(aes(ymin=minC, ymax=maxC, group=sym.id, x=stepsleft)) +
facet_grid(pol.type~sym.id)
ggplot(splineplot.dat2, aes(x=stepsleft, y=mean, group=sym.id, col=pp))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=minC, ymax=maxC, group=sym.id, x=stepsleft)) +
facet_grid(pol.type~sym.id)
bridge_sampler(splinefit2)
bridge_sampler(splinefit)
splinefit <- stan(
file = "src/Stan/spline1test1.stan",
data = splinedat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 4,
verbose = T
)
