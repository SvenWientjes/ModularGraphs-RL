}else{
queue <- append(queue,list(c(pCur,t)))
}
}
}
queue[[1]] <- NULL
}
hits/length(paths)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9),
c(12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14))
# Calculate nr of 'hits' in nSteps of complete random walk ----
paths   <- list()
queue   <- list(vStart)
pathIdx <- 1
hits <- 0
while(length(queue) > 0){
pCur <- queue[[1]]
if(length(pCur)==nVisit){
paths[[pathIdx]] <- pCur
pathIdx <- pathIdx+1
}else{
for(t in Edges[[tail(pCur,1)]]){
if(t==vGoal){
paths[[pathIdx]] <- c(pCur,t)
pathIdx <- pathIdx+1
hits <- hits+1
}else{
queue <- append(queue,list(c(pCur,t)))
}
}
}
queue[[1]] <- NULL
}
hits/length(paths)
#######################################################################################################################################################################################################
################################################### Testing modular graphs with random walks ##########################################################################################################
#######################################################################################################################################################################################################
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 11 #one more than the number of transitions (the first state counts, but is not transitioned into)
#######################################################################################################################################################################################################
################################################### Testing modular graphs with random walks ##########################################################################################################
#######################################################################################################################################################################################################
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 11 #one more than the number of transitions (the first state counts, but is not transitioned into)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9),
c(12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14))
# Calculate nr of 'hits' in nSteps of complete random walk ----
paths   <- list()
queue   <- list(vStart)
pathIdx <- 1
hits <- 0
while(length(queue) > 0){
pCur <- queue[[1]]
if(length(pCur)==nVisit){
paths[[pathIdx]] <- pCur
pathIdx <- pathIdx+1
}else{
for(t in Edges[[tail(pCur,1)]]){
if(t==vGoal){
paths[[pathIdx]] <- c(pCur,t)
pathIdx <- pathIdx+1
hits <- hits+1
}else{
queue <- append(queue,list(c(pCur,t)))
}
}
}
queue[[1]] <- NULL
}
hits/length(paths)
paths
hits
View(paths)
paths[[488]]
hits/length(paths)
paths[22899]
paths[22900]
paths[22901]
paths[22910]
4^10
4^11
0.0338*10^4
0.0338*4^10
#######################################################################################################################################################################################################
################################################### Testing modular graphs with random walks ##########################################################################################################
#######################################################################################################################################################################################################
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 11 #one more than the number of transitions (the first state counts, but is not transitioned into)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9),
c(10,12,13,14), #Do allow triple event, but no event repeats or leaving correct event
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14))
# Calculate nr of 'hits' in nSteps of complete random walk ----
paths   <- list()
queue   <- list(vStart)
pathIdx <- 1
hits <- 0
while(length(queue) > 0){
pCur <- queue[[1]]
if(length(pCur)==nVisit){
paths[[pathIdx]] <- pCur
pathIdx <- pathIdx+1
}else{
for(t in Edges[[tail(pCur,1)]]){
if(t==vGoal){
paths[[pathIdx]] <- c(pCur,t)
pathIdx <- pathIdx+1
hits <- hits+1
}else{
queue <- append(queue,list(c(pCur,t)))
}
}
}
queue[[1]] <- NULL
}
#######################################################################################################################################################################################################
################################################### Testing modular graphs with random walks ##########################################################################################################
#######################################################################################################################################################################################################
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 11 #one more than the number of transitions (the first state counts, but is not transitioned into)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9),
c(10,12,13,14), #Do allow triple event, but no event repeats or leaving correct event
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14))
# Calculate nr of 'hits' in nSteps of complete random walk ----
paths   <- list()
queue   <- list(vStart)
pathIdx <- 1
hits <- 0
while(length(queue) > 0){
pCur <- queue[[1]]
if(length(pCur)==nVisit){
paths[[pathIdx]] <- pCur
pathIdx <- pathIdx+1
}else{
for(t in Edges[[tail(pCur,1)]]){
if(t==vGoal){
paths[[pathIdx]] <- c(pCur,t)
pathIdx <- pathIdx+1
hits <- hits+1
}else{
queue <- append(queue,list(c(pCur,t)))
}
}
}
queue[[1]] <- NULL
}
hits/length(paths)
list(0)
tail(c(1),1)
tail(c(1,2),1)
#######################################################################################################################################################################################################
################################################### Testing modular graphs with random walks ##########################################################################################################
#######################################################################################################################################################################################################
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 3 #one more than the number of transitions (the first state counts, but is not transitioned into)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9),
c(10,12,13,14), #Do allow triple event, but no event repeats or leaving correct event
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14))
# Calculate nr of 'hits' in nSteps of complete random walk while not allowing direct back-track ----
paths   <- list()
queue   <- list(vStart)
prev    <- list(0)
pathIdx <- 1
hits <- 0
while(length(queue) > 0){
pCur <- queue[[1]]
if(length(pCur)==nVisit){
paths[[pathIdx]] <- pCur
pathIdx <- pathIdx+1
}else{
for(t in Edges[[tail(pCur,1)]]){
if(t==vGoal){
paths[[pathIdx]] <- c(pCur,t)
pathIdx <- pathIdx+1
hits <- hits+1
}else if(t!=prev[[1]]){
queue <- append(queue,list(c(pCur,t)))
prev  <- append(prev, tail(pCur,1))
}else{
#this gets skipped
}
}
}
queue[[1]] <- NULL
prev[[1]]  <- NULL
}
paths
#######################################################################################################################################################################################################
################################################### Testing modular graphs with random walks ##########################################################################################################
#######################################################################################################################################################################################################
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 4 #one more than the number of transitions (the first state counts, but is not transitioned into)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9),
c(10,12,13,14), #Do allow triple event, but no event repeats or leaving correct event
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14))
()
()
# Calculate nr of 'hits' in nSteps of complete random walk while not allowing direct back-track ----
paths   <- list()
queue   <- list(vStart)
prev    <- list(0)
pathIdx <- 1
hits <- 0
while(length(queue) > 0){
pCur <- queue[[1]]
if(length(pCur)==nVisit){
paths[[pathIdx]] <- pCur
pathIdx <- pathIdx+1
}else{
for(t in Edges[[tail(pCur,1)]]){
if(t==vGoal){
paths[[pathIdx]] <- c(pCur,t)
pathIdx <- pathIdx+1
hits <- hits+1
}else if(t!=prev[[1]]){
queue <- append(queue,list(c(pCur,t)))
prev  <- append(prev, tail(pCur,1))
}else{
#this gets skipped
}
}
}
queue[[1]] <- NULL
prev[[1]]  <- NULL
}
paths
hits/length(paths)
#######################################################################################################################################################################################################
################################################### Testing modular graphs with random walks ##########################################################################################################
#######################################################################################################################################################################################################
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 11 #one more than the number of transitions (the first state counts, but is not transitioned into)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9),
c(10,12,13,14), #Do allow triple event, but no event repeats or leaving correct event
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14))
# Calculate nr of 'hits' in nSteps of complete random walk while not allowing direct back-track ----
paths   <- list()
queue   <- list(vStart)
prev    <- list(0)
pathIdx <- 1
hits <- 0
while(length(queue) > 0){
pCur <- queue[[1]]
if(length(pCur)==nVisit){
paths[[pathIdx]] <- pCur
pathIdx <- pathIdx+1
}else{
for(t in Edges[[tail(pCur,1)]]){
if(t==vGoal){
paths[[pathIdx]] <- c(pCur,t)
pathIdx <- pathIdx+1
hits <- hits+1
}else if(t!=prev[[1]]){
queue <- append(queue,list(c(pCur,t)))
prev  <- append(prev, tail(pCur,1))
}else{
#this gets skipped
}
}
}
queue[[1]] <- NULL
prev[[1]]  <- NULL
}
paths
hits/length(paths)
#######################################################################################################################################################################################################
################################################### Testing modular graphs with random walks ##########################################################################################################
#######################################################################################################################################################################################################
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 15 #one more than the number of transitions (the first state counts, but is not transitioned into)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(7, 8, 9),
c(10,12,13,14), #Do allow triple event, but no event repeats or leaving correct event
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14))
# Calculate nr of 'hits' in nSteps of complete random walk while not allowing direct back-track ----
paths   <- list()
queue   <- list(vStart)
prev    <- list(0)
pathIdx <- 1
hits <- 0
while(length(queue) > 0){
pCur <- queue[[1]]
if(length(pCur)==nVisit){
paths[[pathIdx]] <- pCur
pathIdx <- pathIdx+1
}else{
for(t in Edges[[tail(pCur,1)]]){
if(t==vGoal){
paths[[pathIdx]] <- c(pCur,t)
pathIdx <- pathIdx+1
hits <- hits+1
}else if(t!=prev[[1]]){
queue <- append(queue,list(c(pCur,t)))
prev  <- append(prev, tail(pCur,1))
}else{
#this gets skipped
}
}
}
queue[[1]] <- NULL
prev[[1]]  <- NULL
}
0.25*0.25*0.25
nV     <- 15
vStart <- 1
vGoal  <- 8
nVisit <- 11 #one more than the number of transitions (the first state counts, but is not transitioned into)
Edges <- list(c(2, 3, 4, 5),
c(1, 3, 4, 5),
c(1, 2, 4, 5),
c(1, 2, 3, 6),
c(1, 2, 3, 15),
c(4, 7, 8, 9),
c(6, 8, 9, 10),
c(6, 7, 9, 10),
c(6, 7, 8, 10),
c(11,7, 8, 9),
c(10,12,13,14), #Do allow triple event, but no event repeats or leaving correct event
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(5, 12,13,14))
## Simulate experimental paths without allowing back-track ----
nExp       <- 10000
pGoal      <- rep(0,nExp)
winL       <- c()
for(ex in 1:nExp){
nTrials    <- 500
experiment <- list()
for(t in 1:nTrials){
trial <- c(vStart, sample(Edges[[vStart]],1))
for(s in 1:(nVisit-2)){
if(vGoal %in% trial){
break
}
nextnode <- sample(Edges[[tail(trial,1)]],1)
#while(nextnode == tail(trial,2)[1]){
#  nextnode <- sample(Edges[[tail(trial,1)]],1)
#}
trial <- c(trial,nextnode)
}
experiment <- append(experiment, list(trial))
}
pGoal[ex] <- sum(sapply(experiment, function(x){vGoal %in% x}))/nTrials
winL <- c(winL, sapply(experiment[sapply(experiment, function(x){vGoal %in% x})], length))
}
# Density plot of how often goal is reached
ggGoal <- data.frame(prop=pGoal)
ggplot(ggGoal, aes(x=prop))+
geom_histogram(aes(y=..density..), color='gray30',fill='white') +
geom_density() +
ggtitle('Proportion of trials where goal is reached', subtitle='Over 10000 experiments of 500 trials with maximum 10 transitions')
library(ggplot2)
# Density plot of how often goal is reached
ggGoal <- data.frame(prop=pGoal)
ggplot(ggGoal, aes(x=prop))+
geom_histogram(aes(y=..density..), color='gray30',fill='white') +
geom_density() +
ggtitle('Proportion of trials where goal is reached', subtitle='Over 10000 experiments of 500 trials with maximum 10 transitions')
# Density plot (?) of how many trials it takes to reach the goal
winL.p <- sapply(1:length(table(winL)), function(x){table(winL)[x]/length(winL)})
goalStep <- data.frame(nstep=min(winL):max(winL), prop=winL.p)
ggplot(goalStep, aes(x=nstep,y=prop,label=prop)) +
geom_bar(stat='identity') +
geom_line(aes(x=as.numeric(nstep)),color='red')+
geom_point(aes(x=as.numeric(nstep)),color='red')+
geom_label(aes(label=round(prop,digits=5)))
source('~/ModularGraphs/fairyMaster.R')
load("C:/Users/wient/OneDrive - UGent/Projects/ModularGraphs-RL/Rsims/data/4ag_100tr_RLexplore.RData")
matrix(c(0,1,1,0),nrow=2,ncncol = 2)
matrix(c(0,1,1,0),nrow=2,ncol=2)
matrix(c(0,1,1,0),nrow=2,ncol=2) %*% matrix(c(0,1,1,0),nrow=2,ncol=2)
library(matlib)
library(MASS)
ginv(matrix(c(0,1,1,0),nrow=2,ncol=2))
ginv(matrix(c(1,2,3,4,5,6,0,0,0),nrow=3,ncol=3))
matrix(c(1,2,3,4,5,6,0,0,0),nrow=3,ncol=3)
t(matrix(c(1,2,3,4,5,6,0,0,0),nrow=3,ncol=3))
ginv(t(matrix(c(1,2,3,4,5,6,0,0,0),nrow=3,ncol=3)))
ginv(t(matrix(c(1,2,3,4,5,6,0,0,0),nrow=3,ncol=3))) %*% matrix(c(1,2,3,4,5,6,0,0,0),nrow=3,ncol=3)
t(matrix(c(1,2,3,4,5,6,0,0,0),nrow=3,ncol=3)) %*% ginv(t(matrix(c(1,2,3,4,5,6,0,0,0),nrow=3,ncol=3)))
?ginv
matrix(c(4,0,0,0,3,0,0,0,2),3,3)
matrix(c(4,0,0,0,3,0,0,0,2),3,3) %*% matrix(c(1/4,0,0,0,1/3,0,0,0,1/2),3,3)
matrix(c(1/4,0,0,0,1/3,0,0,0,1/2),3,3)  %*% matrix(c(4,0,0,0,3,0,0,0,2),3,3)
c(5,3,2) %*% matrix(c(6,3,10,4,7,9,7,5,9),3,3)
c(59,59,68) %*% c(1,1,1)
c(59,59,68) %*% c(1/3,1/3,1/3)
c(300,200,100) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3)
c(300,200,100) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3)^2
c(300,200,100) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3)^4
0.2*300
0.2*1200
c(300,200,100) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3)
c(300,200,100) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3)
1412+108+106
c(300,200,100) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3)
c(300,200,1000) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3) %*% matrix(c(0,1,10,0.2,0,0,0,0.5,0),3,3)
setwd("C:/Users/wient/OneDrive - UGent/Projects/ModularGraphs-RL/Rsims")
git status
