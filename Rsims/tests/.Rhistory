################################################################################
############################ Schapiro - Bet tests ##############################
################################################################################
library(data.table)
library(foreach)
library(doParallel)
################################################################################
# Task Parameters
nTrs <- 100
winM <- 1
nVisit <- 15
# Transitions in list and in matrix form
Edges <- list(c(02,03,04,15),
c(01,03,04,05),
c(01,02,04,05),
c(01,02,03,05),
c(02,03,04,06),
c(05,07,08,09),
c(06,08,09,10),
c(06,07,09,10),
c(06,07,08,10),
c(07,08,09,11),
c(10,12,13,14),
c(11,13,14,15),
c(11,12,14,15),
c(11,12,13,15),
c(12,13,14,01))
a <- 0.25
tMat <- rbind(c(0,a,a,a,0,0,0,0,0,0,0,0,0,0,a),
c(a,0,a,a,a,0,0,0,0,0,0,0,0,0,0),
c(a,a,0,a,a,0,0,0,0,0,0,0,0,0,0),
c(a,a,a,0,a,0,0,0,0,0,0,0,0,0,0),
c(0,a,a,a,0,a,0,0,0,0,0,0,0,0,0),
c(0,0,0,0,a,0,a,a,a,0,0,0,0,0,0),
c(0,0,0,0,0,a,0,a,a,a,0,0,0,0,0),
c(0,0,0,0,0,a,a,0,a,a,0,0,0,0,0),
c(0,0,0,0,0,a,a,a,0,a,0,0,0,0,0),
c(0,0,0,0,0,0,a,a,a,0,a,0,0,0,0),
c(0,0,0,0,0,0,0,0,0,a,0,a,a,a,0),
c(0,0,0,0,0,0,0,0,0,0,a,0,a,a,a),
c(0,0,0,0,0,0,0,0,0,0,a,a,0,a,a),
c(0,0,0,0,0,0,0,0,0,0,a,a,a,0,a),
c(a,0,0,0,0,0,0,0,0,0,0,a,a,a,0))
################################################################################
# Symmetry assistance
idmap.d  <- list(a=c(2,3,4),b=c(7,8,9),c=c(12,13,14))    # All deep nodes
idmap.bt <- list(a=c(1,5), b=c(6,10), c=c(11,15))        # All bottleneck nodes
c.map <- list(a=c('c','b'), b=c('a','c'), c=c('b','a'))  # Cluster maps of bottlenecks
idmap.dg  <- list(a=c(1,15), b=c(2,3,4, 12,13,14), c=c(5,11), d=c(6,10), e=c(8,9)) # Symmetries to Deep Goal (b) ; goal = 7
idmap.bg  <- list(a=c(1), b=c(2,3,4), c=c(5), d=c(7,8,9), e=c(10), f=c(11),g=c(12,13,14),h=c(15)) # Symmetries to Bottleneck Goal (b) ; goal = 6
################################################################################
# Analysis of goal reaches and expected values #
## Goal Hits per start & goal type & stepsleft ----
# Organize different start and goal types
s.types <- c('deep','bottleneck')
g.types <- c('deep','bottleneck close', 'bottleneck far')
# Which trial (node presentation) is the goal reached?
TrReach = 2:15
# Initialize data.table to get all values
Analytics <- data.table(rbind(expand.grid(s.types[1], g.types, NA, TrReach),
expand.grid(s.types[2], g.types, c('close','far'), TrReach)))
names(Analytics) <- c('s.type', 'g.type', 'clust.loc', 't.reach')
Analytics$goalp  <- 0
Analytics$startp <- 0
Analytics$reachp <- 0
# Create representative starting and goal nodes for analysis
start.v <- list('deep'       = c(0,1,0,0,0,0,0,0,0,0,0,0,0,0,0),
'bottleneck' = c(0,0,0,0,1,0,0,0,0,0,0,0,0,0,0))
#goal.v  <- list('deep' = c(7,6,10), 'bottleneck' = c(7,12,6,10,15,11))
goal.v <- list('deep' = c(7,6,10), 'bottleneck' = list('close'=c(7,6,10), 'far'=c(12,15,11)))
# Fill the Analytics matrix with the values
for(i in 1:nrow(Analytics)){
# Get start/goal type
st <- Analytics[i,s.type]
gl <- Analytics[i,g.type]
# Get actual nodes
st.v <- start.v[[st]] #Vector form
if(st=='deep'){gl.v <- goal.v[[st]][which(g.types==gl)]
}else if(st=='bottleneck'){gl.v <- goal.v[[st]][[Analytics[i,clust.loc]]][which(g.types==gl)]}
# Get absorbing transition matrix
tMat.abs <- tMat
tMat.abs[gl.v,] <- 0
# Get chance of reaching the goal at EXACTLY node nr t.reach
Analytics$reachp[i] <- (st.v %*% matrix.power(tMat.abs, Analytics[i, t.reach-1]))[gl.v]
# Get chances of having sampled this start/goal type
if(st=='deep'){
Analytics$startp[i] <- 3/5
if(gl=='deep'){
Analytics$goalp[i] <- 3/5
}else{
Analytics$goalp[i] <- 1/5
}
}else if(st=='bottleneck'){
Analytics$startp[i] <- 2/5
if(grepl('deep',gl,fixed=T)){
Analytics$goalp[i] <- 3/10
}else{
Analytics$goalp[i] <- 1/10
}
}
}
library(Matrix)
library(matrixcalc)
install.packages("matrixcalc")
library(matrixcalc)
# Fill the Analytics matrix with the values
for(i in 1:nrow(Analytics)){
# Get start/goal type
st <- Analytics[i,s.type]
gl <- Analytics[i,g.type]
# Get actual nodes
st.v <- start.v[[st]] #Vector form
if(st=='deep'){gl.v <- goal.v[[st]][which(g.types==gl)]
}else if(st=='bottleneck'){gl.v <- goal.v[[st]][[Analytics[i,clust.loc]]][which(g.types==gl)]}
# Get absorbing transition matrix
tMat.abs <- tMat
tMat.abs[gl.v,] <- 0
# Get chance of reaching the goal at EXACTLY node nr t.reach
Analytics$reachp[i] <- (st.v %*% matrix.power(tMat.abs, Analytics[i, t.reach-1]))[gl.v]
# Get chances of having sampled this start/goal type
if(st=='deep'){
Analytics$startp[i] <- 3/5
if(gl=='deep'){
Analytics$goalp[i] <- 3/5
}else{
Analytics$goalp[i] <- 1/5
}
}else if(st=='bottleneck'){
Analytics$startp[i] <- 2/5
if(grepl('deep',gl,fixed=T)){
Analytics$goalp[i] <- 3/10
}else{
Analytics$goalp[i] <- 1/10
}
}
}
## Attach an overall trajectory chance of occurrence ----
Analytics[,trajp:=goalp*startp*reachp, by=.(s.type,g.type,t.reach)]
# Overall goal hit rate!
Analytics[,sum(trajp)] * nTrs
## Trial types of start-goal combinations and number of expected wins
trTypes <- Analytics[,list(startp=unique(startp),goalp=unique(goalp),clust.loc=unique(clust.loc), trajp=sum(trajp)), by=.(s.type,g.type,clust.loc)
][,list(nTrs=startp*goalp*nTrs, nWin=nTrs*trajp), by=.(s.type,g.type,clust.loc)
][,list(nTrs, nWin=floor(nWin),resWin=nWin-floor(nWin)), by=.(s.type,g.type,clust.loc)
][s.type=='deep'&g.type=='deep'|s.type=='bottleneck'&g.type=='bottleneck far' & clust.loc=='far'|s.type=='deep'&g.type=='bottleneck far'
|s.type=='bottleneck'&g.type=='deep'&clust.loc=='far'|s.type=='deep'&g.type=='bottleneck close', nWin:=nWin+1
][,list(s.type,g.type,clust.loc,nTrs,nWin,nLose=nTrs-nWin)
][c(5,6,8,9,4,7,2,3,1)]
trTypes
pop
